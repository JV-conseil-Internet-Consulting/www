{"version":3,"file":"vendors-node_modules_lit-html_lit-html_js-deepdive-9.1.7.min.js","mappings":"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","sources":["webpack://deepdive/../src/lib/default-template-processor.ts","webpack://deepdive/../src/lib/directive.ts","webpack://deepdive/../src/lib/dom.ts","webpack://deepdive/../src/lib/part.ts","webpack://deepdive/../src/lib/parts.ts","webpack://deepdive/../src/lib/render.ts","webpack://deepdive/../src/lib/template-factory.ts","webpack://deepdive/../src/lib/template-instance.ts","webpack://deepdive/../src/lib/template-result.ts","webpack://deepdive/../src/lib/template.ts","webpack://deepdive/src/lit-html.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Part} from './part.js';\nimport {AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\n\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor implements TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: string[],\n      options: RenderOptions): ReadonlyArray<Part> {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const committer = new PropertyCommitter(element, name.slice(1), strings);\n      return committer.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const committer = new AttributeCommitter(element, name, strings);\n    return committer.parts;\n  }\n  /**\n   * Create parts for a text-position binding.\n   * @param templateFactory\n   */\n  handleTextExpression(options: RenderOptions) {\n    return new NodePart(options);\n  }\n}\n\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Part} from './part.js';\n\nconst directives = new WeakMap<object, true>();\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type DirectiveFactory = (...args: any[]) => object;\n\nexport type DirectiveFn = (part: Part) => void;\n\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = <F extends DirectiveFactory>(f: F): F =>\n    ((...args: unknown[]) => {\n      const d = f(...args);\n      directives.set(d, true);\n      return d;\n    }) as F;\n\nexport const isDirective = (o: unknown): o is DirectiveFn => {\n  return typeof o === 'function' && directives.has(o);\n};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\ninterface MaybePolyfilledCe extends CustomElementRegistry {\n  readonly polyfillWrapFlushCallback?: object;\n}\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = typeof window !== 'undefined' &&\n    window.customElements != null &&\n    (window.customElements as MaybePolyfilledCe).polyfillWrapFlushCallback !==\n        undefined;\n\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes =\n    (container: Node,\n     start: Node|null,\n     end: Node|null = null,\n     before: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.insertBefore(start!, before);\n        start = n;\n      }\n    };\n\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes =\n    (container: Node, start: Node|null, end: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.removeChild(start!);\n        start = n;\n      }\n    };\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * The Part interface represents a dynamic part of a template instance rendered\n * by lit-html.\n */\nexport interface Part {\n  readonly value: unknown;\n\n  /**\n   * Sets the current part value, but does not write it to the DOM.\n   * @param value The value that will be committed.\n   */\n  setValue(value: unknown): void;\n\n  /**\n   * Commits the current part value, causing it to actually be written to the\n   * DOM.\n   *\n   * Directives are run at the start of `commit`, so that if they call\n   * `part.setValue(...)` synchronously that value will be used in the current\n   * commit, and there's no need to call `part.commit()` within the directive.\n   * If directives set a part value asynchronously, then they must call\n   * `part.commit()` manually.\n   */\n  commit(): void;\n}\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isDirective} from './directive.js';\nimport {removeNodes} from './dom.js';\nimport {noChange, nothing, Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {createMarker} from './template.js';\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\nexport type Primitive = null|undefined|boolean|number|string|symbol|bigint;\nexport const isPrimitive = (value: unknown): value is Primitive => {\n  return (\n      value === null ||\n      !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value: unknown): value is Iterable<unknown> => {\n  return Array.isArray(value) ||\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      !!(value && (value as any)[Symbol.iterator]);\n};\n\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attribute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n  readonly parts: ReadonlyArray<AttributePart>;\n  dirty = true;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n    this.parts = [];\n    for (let i = 0; i < strings.length - 1; i++) {\n      (this.parts as AttributePart[])[i] = this._createPart();\n    }\n  }\n\n  /**\n   * Creates a single part. Override this to create a differnt type of part.\n   */\n  protected _createPart(): AttributePart {\n    return new AttributePart(this);\n  }\n\n  protected _getValue(): unknown {\n    const strings = this.strings;\n    const l = strings.length - 1;\n    const parts = this.parts;\n\n    // If we're assigning an attribute via syntax like:\n    //    attr=\"${foo}\"  or  attr=${foo}\n    // but not\n    //    attr=\"${foo} ${bar}\" or attr=\"${foo} baz\"\n    // then we don't want to coerce the attribute value into one long\n    // string. Instead we want to just return the value itself directly,\n    // so that sanitizeDOMValue can get the actual value rather than\n    // String(value)\n    // The exception is if v is an array, in which case we do want to smash\n    // it together into a string without calling String() on the array.\n    //\n    // This also allows trusted values (when using TrustedTypes) being\n    // assigned to DOM sinks without being stringified in the process.\n    if (l === 1 && strings[0] === '' && strings[1] === '') {\n      const v = parts[0].value;\n      if (typeof v === 'symbol') {\n        return String(v);\n      }\n      if (typeof v === 'string' || !isIterable(v)) {\n        return v;\n      }\n    }\n    let text = '';\n\n    for (let i = 0; i < l; i++) {\n      text += strings[i];\n      const part = parts[i];\n      if (part !== undefined) {\n        const v = part.value;\n        if (isPrimitive(v) || !isIterable(v)) {\n          text += typeof v === 'string' ? v : String(v);\n        } else {\n          for (const t of v) {\n            text += typeof t === 'string' ? t : String(t);\n          }\n        }\n      }\n    }\n\n    text += strings[l];\n    return text;\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      this.element.setAttribute(this.name, this._getValue() as string);\n    }\n  }\n}\n\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart implements Part {\n  readonly committer: AttributeCommitter;\n  value: unknown = undefined;\n\n  constructor(committer: AttributeCommitter) {\n    this.committer = committer;\n  }\n\n  setValue(value: unknown): void {\n    if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n      this.value = value;\n      // If the value is a not a directive, dirty the committer so that it'll\n      // call setAttribute. If the value is a directive, it'll dirty the\n      // committer if it calls setValue().\n      if (!isDirective(value)) {\n        this.committer.dirty = true;\n      }\n    }\n  }\n\n  commit() {\n    while (isDirective(this.value)) {\n      const directive = this.value;\n      this.value = noChange;\n      directive(this);\n    }\n    if (this.value === noChange) {\n      return;\n    }\n    this.committer.commit();\n  }\n}\n\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart implements Part {\n  readonly options: RenderOptions;\n  startNode!: Node;\n  endNode!: Node;\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(options: RenderOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Appends this part into a container.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendInto(container: Node) {\n    this.startNode = container.appendChild(createMarker());\n    this.endNode = container.appendChild(createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n   * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n   * such as those that appear in a literal section of a template.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterNode(ref: Node) {\n    this.startNode = ref;\n    this.endNode = ref.nextSibling!;\n  }\n\n  /**\n   * Appends this part into a parent part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendIntoPart(part: NodePart) {\n    part.__insert(this.startNode = createMarker());\n    part.__insert(this.endNode = createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterPart(ref: NodePart) {\n    ref.__insert(this.startNode = createMarker());\n    this.endNode = ref.endNode;\n    ref.endNode = this.startNode;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    if (this.startNode.parentNode === null) {\n      return;\n    }\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    const value = this.__pendingValue;\n    if (value === noChange) {\n      return;\n    }\n    if (isPrimitive(value)) {\n      if (value !== this.value) {\n        this.__commitText(value);\n      }\n    } else if (value instanceof TemplateResult) {\n      this.__commitTemplateResult(value);\n    } else if (value instanceof Node) {\n      this.__commitNode(value);\n    } else if (isIterable(value)) {\n      this.__commitIterable(value);\n    } else if (value === nothing) {\n      this.value = nothing;\n      this.clear();\n    } else {\n      // Fallback, will render the string representation\n      this.__commitText(value);\n    }\n  }\n\n  private __insert(node: Node) {\n    this.endNode.parentNode!.insertBefore(node, this.endNode);\n  }\n\n  private __commitNode(value: Node): void {\n    if (this.value === value) {\n      return;\n    }\n    this.clear();\n    this.__insert(value);\n    this.value = value;\n  }\n\n  private __commitText(value: unknown): void {\n    const node = this.startNode.nextSibling!;\n    value = value == null ? '' : value;\n    // If `value` isn't already a string, we explicitly convert it here in case\n    // it can't be implicitly converted - i.e. it's a symbol.\n    const valueAsString: string =\n        typeof value === 'string' ? value : String(value);\n    if (node === this.endNode.previousSibling &&\n        node.nodeType === 3 /* Node.TEXT_NODE */) {\n      // If we only have a single text node between the markers, we can just\n      // set its value, rather than replacing it.\n      // TODO(justinfagnani): Can we just check if this.value is primitive?\n      (node as Text).data = valueAsString;\n    } else {\n      this.__commitNode(document.createTextNode(valueAsString));\n    }\n    this.value = value;\n  }\n\n  private __commitTemplateResult(value: TemplateResult): void {\n    const template = this.options.templateFactory(value);\n    if (this.value instanceof TemplateInstance &&\n        this.value.template === template) {\n      this.value.update(value.values);\n    } else {\n      // Make sure we propagate the template processor from the TemplateResult\n      // so that we use its syntax extension, etc. The template factory comes\n      // from the render function options so that it can control template\n      // caching and preprocessing.\n      const instance =\n          new TemplateInstance(template, value.processor, this.options);\n      const fragment = instance._clone();\n      instance.update(value.values);\n      this.__commitNode(fragment);\n      this.value = instance;\n    }\n  }\n\n  private __commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If _value is an array, then the previous render was of an\n    // iterable and _value will contain the NodeParts from the previous\n    // render. If _value is not an array, clear this part and make a new\n    // array for NodeParts.\n    if (!Array.isArray(this.value)) {\n      this.value = [];\n      this.clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this.value as NodePart[];\n    let partIndex = 0;\n    let itemPart: NodePart|undefined;\n\n    for (const item of value) {\n      // Try to reuse an existing part\n      itemPart = itemParts[partIndex];\n\n      // If no existing part, create a new one\n      if (itemPart === undefined) {\n        itemPart = new NodePart(this.options);\n        itemParts.push(itemPart);\n        if (partIndex === 0) {\n          itemPart.appendIntoPart(this);\n        } else {\n          itemPart.insertAfterPart(itemParts[partIndex - 1]);\n        }\n      }\n      itemPart.setValue(item);\n      itemPart.commit();\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n      this.clear(itemPart && itemPart.endNode);\n    }\n  }\n\n  clear(startNode: Node = this.startNode) {\n    removeNodes(\n        this.startNode.parentNode!, startNode.nextSibling!, this.endNode);\n  }\n}\n\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart implements Part {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: readonly string[];\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(element: Element, name: string, strings: readonly string[]) {\n    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n      throw new Error(\n          'Boolean attributes can only contain a single expression');\n    }\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n    const value = !!this.__pendingValue;\n    if (this.value !== value) {\n      if (value) {\n        this.element.setAttribute(this.name, '');\n      } else {\n        this.element.removeAttribute(this.name);\n      }\n      this.value = value;\n    }\n    this.__pendingValue = noChange;\n  }\n}\n\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n  readonly single: boolean;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    super(element, name, strings);\n    this.single =\n        (strings.length === 2 && strings[0] === '' && strings[1] === '');\n  }\n\n  protected _createPart(): PropertyPart {\n    return new PropertyPart(this);\n  }\n\n  protected _getValue() {\n    if (this.single) {\n      return this.parts[0].value;\n    }\n    return super._getValue();\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this.element as any)[this.name] = this._getValue();\n    }\n  }\n}\n\nexport class PropertyPart extends AttributePart {}\n\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the third\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n\n// Wrap into an IIFE because MS Edge <= v41 does not support having try/catch\n// blocks right into the body of a module\n(() => {\n  try {\n    const options = {\n      get capture() {\n        eventOptionsSupported = true;\n        return false;\n      }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    window.addEventListener('test', options as any, options);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    window.removeEventListener('test', options as any, options);\n  } catch (_e) {\n    // event options not supported\n  }\n})();\n\ntype EventHandlerWithOptions =\n    EventListenerOrEventListenerObject&Partial<AddEventListenerOptions>;\nexport class EventPart implements Part {\n  readonly element: Element;\n  readonly eventName: string;\n  readonly eventContext?: EventTarget;\n  value: undefined|EventHandlerWithOptions = undefined;\n  private __options?: AddEventListenerOptions;\n  private __pendingValue: undefined|EventHandlerWithOptions = undefined;\n  private readonly __boundHandleEvent: (event: Event) => void;\n\n  constructor(element: Element, eventName: string, eventContext?: EventTarget) {\n    this.element = element;\n    this.eventName = eventName;\n    this.eventContext = eventContext;\n    this.__boundHandleEvent = (e) => this.handleEvent(e);\n  }\n\n  setValue(value: undefined|EventHandlerWithOptions): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange as EventHandlerWithOptions;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n\n    const newListener = this.__pendingValue;\n    const oldListener = this.value;\n    const shouldRemoveListener = newListener == null ||\n        oldListener != null &&\n            (newListener.capture !== oldListener.capture ||\n             newListener.once !== oldListener.once ||\n             newListener.passive !== oldListener.passive);\n    const shouldAddListener =\n        newListener != null && (oldListener == null || shouldRemoveListener);\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    if (shouldAddListener) {\n      this.__options = getOptions(newListener);\n      this.element.addEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    this.value = newListener;\n    this.__pendingValue = noChange as EventHandlerWithOptions;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this.value === 'function') {\n      this.value.call(this.eventContext || this.element, event);\n    } else {\n      (this.value as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o: AddEventListenerOptions|undefined) => o &&\n    (eventOptionsSupported ?\n         {capture: o.capture, passive: o.passive, once: o.once} :\n         o.capture as AddEventListenerOptions);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {removeNodes} from './dom.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {templateFactory} from './template-factory.js';\n\nexport const parts = new WeakMap<Node, NodePart>();\n\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render =\n    (result: unknown,\n     container: Element|DocumentFragment,\n     options?: Partial<RenderOptions>) => {\n      let part = parts.get(container);\n      if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart({\n                               templateFactory,\n                               ...options,\n                             }));\n        part.appendInto(container);\n      }\n      part.setValue(result);\n      part.commit();\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\n/**\n * A function type that creates a Template from a TemplateResult.\n *\n * This is a hook into the template-creation process for rendering that\n * requires some modification of templates before they're used, like ShadyCSS,\n * which must add classes to elements and remove styles.\n *\n * Templates should be cached as aggressively as possible, so that many\n * TemplateResults produced from the same expression only do the work of\n * creating the Template the first time.\n *\n * Templates are usually cached by TemplateResult.strings and\n * TemplateResult.type, but may be cached by other keys if this function\n * modifies the template.\n *\n * Note that currently TemplateFactories must not add, remove, or reorder\n * expressions, because there is no way to describe such a modification\n * to render() so that values are interpolated to the correct place in the\n * template instances.\n */\nexport type TemplateFactory = (result: TemplateResult) => Template;\n\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result: TemplateResult) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n      keyString: new Map<string, Template>()\n    };\n    templateCaches.set(result.type, templateCache);\n  }\n\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n\n  // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n  const key = result.strings.join(marker);\n\n  // Check if we already have a Template for this key\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement());\n    // Cache the Template for this key\n    templateCache.keyString.set(key, template);\n  }\n\n  // Cache all future queries for this TemplateStringsArray\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\n\n/**\n * The first argument to JS template tags retain identity across multiple\n * calls to a tag for the same literal, so we can cache work done per literal\n * in a Map.\n *\n * Safari currently has a bug which occasionally breaks this behavior, so we\n * need to cache the Template at two levels. We first cache the\n * TemplateStringsArray, and if that fails, we cache a key constructed by\n * joining the strings array.\n */\nexport interface TemplateCache {\n  readonly stringsArray: WeakMap<TemplateStringsArray, Template>;\n  readonly keyString: Map<string, Template>;\n}\n\nexport const templateCaches = new Map<string, TemplateCache>();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isCEPolyfill} from './dom.js';\nimport {Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n  private readonly __parts: Array<Part|undefined> = [];\n  readonly processor: TemplateProcessor;\n  readonly options: RenderOptions;\n  readonly template: Template;\n\n  constructor(\n      template: Template, processor: TemplateProcessor,\n      options: RenderOptions) {\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n\n  update(values: readonly unknown[]) {\n    let i = 0;\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.setValue(values[i]);\n      }\n      i++;\n    }\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.commit();\n      }\n    }\n  }\n\n  _clone(): DocumentFragment {\n    // There are a number of steps in the lifecycle of a template instance's\n    // DOM fragment:\n    //  1. Clone - create the instance fragment\n    //  2. Adopt - adopt into the main document\n    //  3. Process - find part markers and create parts\n    //  4. Upgrade - upgrade custom elements\n    //  5. Update - set node, attribute, property, etc., values\n    //  6. Connect - connect to the document. Optional and outside of this\n    //     method.\n    //\n    // We have a few constraints on the ordering of these steps:\n    //  * We need to upgrade before updating, so that property values will pass\n    //    through any property setters.\n    //  * We would like to process before upgrading so that we're sure that the\n    //    cloned fragment is inert and not disturbed by self-modifying DOM.\n    //  * We want custom elements to upgrade even in disconnected fragments.\n    //\n    // Given these constraints, with full custom elements support we would\n    // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n    //\n    // But Safari does not implement CustomElementRegistry#upgrade, so we\n    // can not implement that order and still have upgrade-before-update and\n    // upgrade disconnected fragments. So we instead sacrifice the\n    // process-before-upgrade constraint, since in Custom Elements v1 elements\n    // must not modify their light DOM in the constructor. We still have issues\n    // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n    // that don't strictly adhere to the no-modification rule because shadow\n    // DOM, which may be created in the constructor, is emulated by being placed\n    // in the light DOM.\n    //\n    // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n    // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n    // in one step.\n    //\n    // The Custom Elements v1 polyfill supports upgrade(), so the order when\n    // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n    // Connect.\n\n    const fragment = isCEPolyfill ?\n        this.template.element.content.cloneNode(true) as DocumentFragment :\n        document.importNode(this.template.element.content, true);\n\n    const stack: Node[] = [];\n    const parts = this.template.parts;\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        fragment,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    let partIndex = 0;\n    let nodeIndex = 0;\n    let part: TemplatePart;\n    let node = walker.nextNode();\n    // Loop through all the nodes and parts of a template\n    while (partIndex < parts.length) {\n      part = parts[partIndex];\n      if (!isTemplatePartActive(part)) {\n        this.__parts.push(undefined);\n        partIndex++;\n        continue;\n      }\n\n      // Progress the tree walker until we find our next part's node.\n      // Note that multiple parts may share the same node (attribute parts\n      // on a single element), so this loop may not run at all.\n      while (nodeIndex < part.index) {\n        nodeIndex++;\n        if (node!.nodeName === 'TEMPLATE') {\n          stack.push(node!);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n        if ((node = walker.nextNode()) === null) {\n          // We've exhausted the content inside a nested template element.\n          // Because we still have parts (the outer for-loop), we know:\n          // - There is a template in the stack\n          // - The walker will find a nextNode outside the template\n          walker.currentNode = stack.pop()!;\n          node = walker.nextNode();\n        }\n      }\n\n      // We've arrived at our part's node.\n      if (part.type === 'node') {\n        const part = this.processor.handleTextExpression(this.options);\n        part.insertAfterNode(node!.previousSibling!);\n        this.__parts.push(part);\n      } else {\n        this.__parts.push(...this.processor.handleAttributeExpressions(\n            node as Element, part.name, part.strings, this.options));\n      }\n      partIndex++;\n    }\n\n    if (isCEPolyfill) {\n      document.adoptNode(fragment);\n      customElements.upgrade(fragment);\n    }\n    return fragment;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {reparentNodes} from './dom.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker} from './template.js';\n\ndeclare const trustedTypes: typeof window.trustedTypes;\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = window.trustedTypes &&\n    trustedTypes!.createPolicy('lit-html', {createHTML: (s) => s});\n\nconst commentMarker = ` ${marker} `;\n\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  readonly strings: TemplateStringsArray;\n  readonly values: readonly unknown[];\n  readonly type: string;\n  readonly processor: TemplateProcessor;\n\n  constructor(\n      strings: TemplateStringsArray, values: readonly unknown[], type: string,\n      processor: TemplateProcessor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n  getHTML(): string {\n    const l = this.strings.length - 1;\n    let html = '';\n    let isCommentBinding = false;\n\n    for (let i = 0; i < l; i++) {\n      const s = this.strings[i];\n      // For each binding we want to determine the kind of marker to insert\n      // into the template source before it's parsed by the browser's HTML\n      // parser. The marker type is based on whether the expression is in an\n      // attribute, text, or comment position.\n      //   * For node-position bindings we insert a comment with the marker\n      //     sentinel as its text content, like <!--{{lit-guid}}-->.\n      //   * For attribute bindings we insert just the marker sentinel for the\n      //     first binding, so that we support unquoted attribute bindings.\n      //     Subsequent bindings can use a comment marker because multi-binding\n      //     attributes must be quoted.\n      //   * For comment bindings we insert just the marker sentinel so we don't\n      //     close the comment.\n      //\n      // The following code scans the template source, but is *not* an HTML\n      // parser. We don't need to track the tree structure of the HTML, only\n      // whether a binding is inside a comment, and if not, if it appears to be\n      // the first binding in an attribute.\n      const commentOpen = s.lastIndexOf('<!--');\n      // We're in comment position if we have a comment open with no following\n      // comment close. Because <-- can appear in an attribute value there can\n      // be false positives.\n      isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n          s.indexOf('-->', commentOpen + 1) === -1;\n      // Check to see if we have an attribute-like sequence preceding the\n      // expression. This can match \"name=value\" like structures in text,\n      // comments, and attribute values, so there can be false-positives.\n      const attributeMatch = lastAttributeNameRegex.exec(s);\n      if (attributeMatch === null) {\n        // We're only in this branch if we don't have a attribute-like\n        // preceding sequence. For comments, this guards against unusual\n        // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n        // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n        // below.\n        html += s + (isCommentBinding ? commentMarker : nodeMarker);\n      } else {\n        // For attributes we use just a marker sentinel, and also append a\n        // $lit$ suffix to the name to opt-out of attribute-specific parsing\n        // that IE and Edge do for style and certain SVG attributes.\n        html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n            attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n            marker;\n      }\n    }\n    html += this.strings[l];\n    return html;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement('template');\n    let value = this.getHTML();\n    if (policy !== undefined) {\n      // this is secure because `this.strings` is a TemplateStringsArray.\n      // TODO: validate this when\n      // https://github.com/tc39/proposal-array-is-template-object is\n      // implemented.\n      value = policy.createHTML(value) as unknown as string;\n    }\n    template.innerHTML = value;\n    return template;\n  }\n}\n\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  readonly parts: TemplatePart[] = [];\n  readonly element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n\n    const nodesToRemove: Node[] = [];\n    const stack: Node[] = [];\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        element.content,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    // Keeps track of the last index associated with a part. We try to delete\n    // unnecessary nodes, but we never want to associate two different parts\n    // to the same index. They must have a constant node between.\n    let lastPartIndex = 0;\n    let index = -1;\n    let partIndex = 0;\n    const {strings, values: {length}} = result;\n    while (partIndex < length) {\n      const node = walker.nextNode() as Element | Comment | Text | null;\n      if (node === null) {\n        // We've exhausted the content inside a nested template element.\n        // Because we still have parts (the outer for-loop), we know:\n        // - There is a template in the stack\n        // - The walker will find a nextNode outside the template\n        walker.currentNode = stack.pop()!;\n        continue;\n      }\n      index++;\n\n      if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n        if ((node as Element).hasAttributes()) {\n          const attributes = (node as Element).attributes;\n          const {length} = attributes;\n          // Per\n          // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n          // attributes are not guaranteed to be returned in document order.\n          // In particular, Edge/IE can return them out of order, so we cannot\n          // assume a correspondence between part index and attribute index.\n          let count = 0;\n          for (let i = 0; i < length; i++) {\n            if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n              count++;\n            }\n          }\n          while (count-- > 0) {\n            // Get the template literal section leading up to the first\n            // expression in this attribute\n            const stringForPart = strings[partIndex];\n            // Find the attribute name\n            const name = lastAttributeNameRegex.exec(stringForPart)![2];\n            // Find the corresponding attribute\n            // All bound attributes have had a suffix added in\n            // TemplateResult#getHTML to opt out of special attribute\n            // handling. To look up the attribute value we also need to add\n            // the suffix.\n            const attributeLookupName =\n                name.toLowerCase() + boundAttributeSuffix;\n            const attributeValue =\n                (node as Element).getAttribute(attributeLookupName)!;\n            (node as Element).removeAttribute(attributeLookupName);\n            const statics = attributeValue.split(markerRegex);\n            this.parts.push({type: 'attribute', index, name, strings: statics});\n            partIndex += statics.length - 1;\n          }\n        }\n        if ((node as Element).tagName === 'TEMPLATE') {\n          stack.push(node);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n      } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n        const data = (node as Text).data;\n        if (data.indexOf(marker) >= 0) {\n          const parent = node.parentNode!;\n          const strings = data.split(markerRegex);\n          const lastIndex = strings.length - 1;\n          // Generate a new text node for each literal section\n          // These nodes are also used as the markers for node parts\n          for (let i = 0; i < lastIndex; i++) {\n            let insert: Node;\n            let s = strings[i];\n            if (s === '') {\n              insert = createMarker();\n            } else {\n              const match = lastAttributeNameRegex.exec(s);\n              if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                s = s.slice(0, match.index) + match[1] +\n                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n              }\n              insert = document.createTextNode(s);\n            }\n            parent.insertBefore(insert, node);\n            this.parts.push({type: 'node', index: ++index});\n          }\n          // If there's no text, we must insert a comment to mark our place.\n          // Else, we can trust it will stick around after cloning.\n          if (strings[lastIndex] === '') {\n            parent.insertBefore(createMarker(), node);\n            nodesToRemove.push(node);\n          } else {\n            (node as Text).data = strings[lastIndex];\n          }\n          // We have a part for each match found\n          partIndex += lastIndex;\n        }\n      } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n        if ((node as Comment).data === marker) {\n          const parent = node.parentNode!;\n          // Add a new marker node to be the startNode of the Part if any of\n          // the following are true:\n          //  * We don't have a previousSibling\n          //  * The previousSibling is already the start of a previous part\n          if (node.previousSibling === null || index === lastPartIndex) {\n            index++;\n            parent.insertBefore(createMarker(), node);\n          }\n          lastPartIndex = index;\n          this.parts.push({type: 'node', index});\n          // If we don't have a nextSibling, keep this node so we have an end.\n          // Else, we can remove it to save future costs.\n          if (node.nextSibling === null) {\n            (node as Comment).data = '';\n          } else {\n            nodesToRemove.push(node);\n            index--;\n          }\n          partIndex++;\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            // TODO (justinfagnani): consider whether it's even worth it to\n            // make bindings in comments work\n            this.parts.push({type: 'node', index: -1});\n            partIndex++;\n          }\n        }\n      }\n    }\n\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\nconst endsWith = (str: string, suffix: string): boolean => {\n  const index = str.length - suffix.length;\n  return index >= 0 && str.slice(index) === suffix;\n};\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  readonly type: 'node'; index: number;\n}|{\n  readonly type: 'attribute';\n  index: number;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    // eslint-disable-next-line no-control-regex\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @packageDocumentation\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {defaultTemplateProcessor} from './lib/default-template-processor.js';\nimport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\n\nexport {DefaultTemplateProcessor, defaultTemplateProcessor} from './lib/default-template-processor.js';\nexport {directive, DirectiveFn, isDirective} from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport {removeNodes, reparentNodes} from './lib/dom.js';\nexport {noChange, nothing, Part} from './lib/part.js';\nexport {AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart} from './lib/parts.js';\nexport {RenderOptions} from './lib/render-options.js';\nexport {parts, render} from './lib/render.js';\nexport {templateCaches, templateFactory} from './lib/template-factory.js';\nexport {TemplateInstance} from './lib/template-instance.js';\nexport {TemplateProcessor} from './lib/template-processor.js';\nexport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\nexport {createMarker, isTemplatePartActive, Template} from './lib/template.js';\n\ndeclare global {\n  interface Window {\n    litHtmlVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\nif (typeof window !== 'undefined') {\n  (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.4.1');\n}\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n"],"names":["AttributeCommitter","BooleanAttributePart","EventPart","NodePart","PropertyCommitter","DefaultTemplateProcessor","_classCallCheck","_createClass","key","value","handleAttributeExpressions","element","name","strings","options","prefix","committer","slice","parts","eventContext","handleTextExpression","defaultTemplateProcessor","directives","WeakMap","directive","f","d","apply","arguments","set","isDirective","o","has","isCEPolyfill","window","customElements","polyfillWrapFlushCallback","undefined","reparentNodes","container","start","end","length","before","n","nextSibling","insertBefore","removeNodes","removeChild","noChange","nothing","TemplateInstance","TemplateResult","createMarker","isPrimitive","_typeof","isIterable","Array","isArray","Symbol","iterator","dirty","i","_createPart","AttributePart","_getValue","l","v","String","text","part","_iterator","_createForOfIteratorHelper","_step","s","done","t","err","e","commit","setAttribute","setValue","__pendingValue","appendInto","startNode","appendChild","endNode","insertAfterNode","ref","appendIntoPart","__insert","insertAfterPart","parentNode","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","node","valueAsString","previousSibling","nodeType","data","document","createTextNode","template","templateFactory","update","values","instance","processor","fragment","_clone","itemParts","partIndex","itemPart","_iterator2","_step2","item","push","Error","removeAttribute","_AttributeCommitter","_inherits","_super","_createSuper","_this","call","single","PropertyPart","_get","_getPrototypeOf","prototype","_AttributePart","_super2","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","eventName","_this2","__boundHandleEvent","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","__options","getOptions","event","render","result","get","firstChild","Object","assign","marker","Template","templateCache","templateCaches","type","stringsArray","keyString","Map","join","getTemplateElement","isTemplatePartActive","__parts","content","cloneNode","importNode","stack","walker","createTreeWalker","nodeIndex","nextNode","index","nodeName","currentNode","pop","_this$__parts","_toConsumableArray","adoptNode","upgrade","boundAttributeSuffix","lastAttributeNameRegex","nodeMarker","policy","trustedTypes","createPolicy","createHTML","commentMarker","concat","getHTML","html","isCommentBinding","commentOpen","lastIndexOf","indexOf","attributeMatch","exec","substr","createElement","innerHTML","SVGTemplateResult","_TemplateResult","svgElement","Math","random","markerRegex","RegExp","nodesToRemove","lastPartIndex","hasAttributes","attributes","count","endsWith","stringForPart","attributeLookupName","toLowerCase","attributeValue","getAttribute","statics","split","tagName","parent","lastIndex","insert","match","_i3","_nodesToRemove","str","suffix","createComment","_len","_key","svg","_len2","_key2"],"sourceRoot":""}