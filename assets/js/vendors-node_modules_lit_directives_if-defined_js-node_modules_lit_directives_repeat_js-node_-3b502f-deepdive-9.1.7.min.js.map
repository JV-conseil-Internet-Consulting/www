{"version":3,"file":"vendors-node_modules_lit_directives_if-defined_js-node_modules_lit_directives_repeat_js-node_-3b502f-deepdive-9.1.7.min.js","mappings":"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","sources":["webpack://deepdive/../src/directives/if-defined.ts","webpack://deepdive/../src/directives/repeat.ts","webpack://deepdive/./node_modules/kv-storage-polyfill/dist/kv-storage-polyfill.mjs"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {AttributePart, directive, Part} from '../lit-html.js';\n\nconst previousValues = new WeakMap<Part, unknown>();\n\n/**\n * For AttributeParts, sets the attribute if the value is defined and removes\n * the attribute if the value is undefined.\n *\n * For other part types, this directive is a no-op.\n */\nexport const ifDefined = directive((value: unknown) => (part: Part) => {\n  const previousValue = previousValues.get(part);\n\n  if (value === undefined && part instanceof AttributePart) {\n    // If the value is undefined, remove the attribute, but only if the value\n    // was previously defined.\n    if (previousValue !== undefined || !previousValues.has(part)) {\n      const name = part.committer.name;\n      part.committer.element.removeAttribute(name);\n    }\n  } else if (value !== previousValue) {\n    part.setValue(value);\n  }\n\n  previousValues.set(part, value);\n});\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {DirectiveFn} from '../lib/directive.js';\nimport {createMarker, directive, NodePart, Part, removeNodes, reparentNodes} from '../lit-html.js';\n\nexport type KeyFn<T> = (item: T, index: number) => unknown;\nexport type ItemTemplate<T> = (item: T, index: number) => unknown;\n\n// Helper functions for manipulating parts\n// TODO(kschaaf): Refactor into Part API?\nconst createAndInsertPart =\n    (containerPart: NodePart, beforePart?: NodePart): NodePart => {\n      const container = containerPart.startNode.parentNode as Node;\n      const beforeNode = beforePart === undefined ? containerPart.endNode :\n                                                    beforePart.startNode;\n      const startNode = container.insertBefore(createMarker(), beforeNode);\n      container.insertBefore(createMarker(), beforeNode);\n      const newPart = new NodePart(containerPart.options);\n      newPart.insertAfterNode(startNode);\n      return newPart;\n    };\n\nconst updatePart = (part: NodePart, value: unknown) => {\n  part.setValue(value);\n  part.commit();\n  return part;\n};\n\nconst insertPartBefore =\n    (containerPart: NodePart, part: NodePart, ref?: NodePart) => {\n      const container = containerPart.startNode.parentNode as Node;\n      const beforeNode = ref ? ref.startNode : containerPart.endNode;\n      const endNode = part.endNode.nextSibling;\n      if (endNode !== beforeNode) {\n        reparentNodes(container, part.startNode, endNode, beforeNode);\n      }\n    };\n\nconst removePart = (part: NodePart) => {\n  removeNodes(\n      part.startNode.parentNode!, part.startNode, part.endNode.nextSibling);\n};\n\n// Helper for generating a map of array item to its index over a subset\n// of an array (used to lazily generate `newKeyToIndexMap` and\n// `oldKeyToIndexMap`)\nconst generateMap = (list: unknown[], start: number, end: number) => {\n  const map = new Map();\n  for (let i = start; i <= end; i++) {\n    map.set(list[i], i);\n  }\n  return map;\n};\n\n// Stores previous ordered list of parts and map of key to index\nconst partListCache = new WeakMap<NodePart, (NodePart | null)[]>();\nconst keyListCache = new WeakMap<NodePart, unknown[]>();\n\n/**\n * A directive that repeats a series of values (usually `TemplateResults`)\n * generated from an iterable, and updates those items efficiently when the\n * iterable changes based on user-provided `keys` associated with each item.\n *\n * Note that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\n * meaning previous DOM for a given key is moved into the new position if\n * needed, and DOM will never be reused with values for different keys (new DOM\n * will always be created for new keys). This is generally the most efficient\n * way to use `repeat` since it performs minimum unnecessary work for insertions\n * and removals.\n *\n * IMPORTANT: If providing a `keyFn`, keys *must* be unique for all items in a\n * given call to `repeat`. The behavior when two or more items have the same key\n * is undefined.\n *\n * If no `keyFn` is provided, this directive will perform similar to mapping\n * items to values, and DOM will be reused against potentially different items.\n */\nexport const repeat =\n    directive(\n        <T>(items: Iterable<T>,\n            keyFnOrTemplate: KeyFn<T>|ItemTemplate<T>,\n            template?: ItemTemplate<T>):\n            DirectiveFn => {\n              let keyFn: KeyFn<T>;\n              if (template === undefined) {\n                template = keyFnOrTemplate;\n              } else if (keyFnOrTemplate !== undefined) {\n                keyFn = keyFnOrTemplate as KeyFn<T>;\n              }\n\n              return (containerPart: Part): void => {\n                if (!(containerPart instanceof NodePart)) {\n                  throw new Error('repeat can only be used in text bindings');\n                }\n                // Old part & key lists are retrieved from the last update\n                // (associated with the part for this instance of the directive)\n                const oldParts = partListCache.get(containerPart) || [];\n                const oldKeys = keyListCache.get(containerPart) || [];\n\n                // New part list will be built up as we go (either reused from\n                // old parts or created for new keys in this update). This is\n                // saved in the above cache at the end of the update.\n                const newParts: NodePart[] = [];\n\n                // New value list is eagerly generated from items along with a\n                // parallel array indicating its key.\n                const newValues: unknown[] = [];\n                const newKeys: unknown[] = [];\n                let index = 0;\n                for (const item of items) {\n                  newKeys[index] = keyFn ? keyFn(item, index) : index;\n                  newValues[index] = template !(item, index);\n                  index++;\n                }\n\n                // Maps from key to index for current and previous update; these\n                // are generated lazily only when needed as a performance\n                // optimization, since they are only required for multiple\n                // non-contiguous changes in the list, which are less common.\n                let newKeyToIndexMap!: Map<unknown, number>;\n                let oldKeyToIndexMap!: Map<unknown, number>;\n\n                // Head and tail pointers to old parts and new values\n                let oldHead = 0;\n                let oldTail = oldParts.length - 1;\n                let newHead = 0;\n                let newTail = newValues.length - 1;\n\n                // Overview of O(n) reconciliation algorithm (general approach\n                // based on ideas found in ivi, vue, snabbdom, etc.):\n                //\n                // * We start with the list of old parts and new values (and\n                //   arrays of their respective keys), head/tail pointers into\n                //   each, and we build up the new list of parts by updating\n                //   (and when needed, moving) old parts or creating new ones.\n                //   The initial scenario might look like this (for brevity of\n                //   the diagrams, the numbers in the array reflect keys\n                //   associated with the old parts or new values, although keys\n                //   and parts/values are actually stored in parallel arrays\n                //   indexed using the same head/tail pointers):\n                //\n                //      oldHead v                 v oldTail\n                //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n                //   newParts: [ ,  ,  ,  ,  ,  ,  ]\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6] <- reflects the user's new\n                //                                      item order\n                //      newHead ^                 ^ newTail\n                //\n                // * Iterate old & new lists from both sides, updating,\n                //   swapping, or removing parts at the head/tail locations\n                //   until neither head nor tail can move.\n                //\n                // * Example below: keys at head pointers match, so update old\n                //   part 0 in-place (no need to move it) and record part 0 in\n                //   the `newParts` list. The last thing we do is advance the\n                //   `oldHead` and `newHead` pointers (will be reflected in the\n                //   next diagram).\n                //\n                //      oldHead v                 v oldTail\n                //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n                //   newParts: [0,  ,  ,  ,  ,  ,  ] <- heads matched: update 0\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n                //                                      & newHead\n                //      newHead ^                 ^ newTail\n                //\n                // * Example below: head pointers don't match, but tail\n                //   pointers do, so update part 6 in place (no need to move\n                //   it), and record part 6 in the `newParts` list. Last,\n                //   advance the `oldTail` and `oldHead` pointers.\n                //\n                //         oldHead v              v oldTail\n                //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n                //   newParts: [0,  ,  ,  ,  ,  , 6] <- tails matched: update 6\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldTail\n                //                                      & newTail\n                //         newHead ^              ^ newTail\n                //\n                // * If neither head nor tail match; next check if one of the\n                //   old head/tail items was removed. We first need to generate\n                //   the reverse map of new keys to index (`newKeyToIndexMap`),\n                //   which is done once lazily as a performance optimization,\n                //   since we only hit this case if multiple non-contiguous\n                //   changes were made. Note that for contiguous removal\n                //   anywhere in the list, the head and tails would advance\n                //   from either end and pass each other before we get to this\n                //   case and removals would be handled in the final while loop\n                //   without needing to generate the map.\n                //\n                // * Example below: The key at `oldTail` was removed (no longer\n                //   in the `newKeyToIndexMap`), so remove that part from the\n                //   DOM and advance just the `oldTail` pointer.\n                //\n                //         oldHead v           v oldTail\n                //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n                //   newParts: [0,  ,  ,  ,  ,  , 6] <- 5 not in new map: remove\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    5 and advance oldTail\n                //         newHead ^           ^ newTail\n                //\n                // * Once head and tail cannot move, any mismatches are due to\n                //   either new or moved items; if a new key is in the previous\n                //   \"old key to old index\" map, move the old part to the new\n                //   location, otherwise create and insert a new part. Note\n                //   that when moving an old part we null its position in the\n                //   oldParts array if it lies between the head and tail so we\n                //   know to skip it when the pointers get there.\n                //\n                // * Example below: neither head nor tail match, and neither\n                //   were removed; so find the `newHead` key in the\n                //   `oldKeyToIndexMap`, and move that old part's DOM into the\n                //   next head position (before `oldParts[oldHead]`). Last,\n                //   null the part in the `oldPart` array since it was\n                //   somewhere in the remaining oldParts still to be scanned\n                //   (between the head and tail pointers) so that we know to\n                //   skip that old part on future iterations.\n                //\n                //         oldHead v        v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2,  ,  ,  ,  , 6] <- stuck: update & move 2\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    into place and advance\n                //                                      newHead\n                //         newHead ^           ^ newTail\n                //\n                // * Note that for moves/insertions like the one above, a part\n                //   inserted at the head pointer is inserted before the\n                //   current `oldParts[oldHead]`, and a part inserted at the\n                //   tail pointer is inserted before `newParts[newTail+1]`. The\n                //   seeming asymmetry lies in the fact that new parts are\n                //   moved into place outside in, so to the right of the head\n                //   pointer are old parts, and to the right of the tail\n                //   pointer are new parts.\n                //\n                // * We always restart back from the top of the algorithm,\n                //   allowing matching and simple updates in place to\n                //   continue...\n                //\n                // * Example below: the head pointers once again match, so\n                //   simply update part 1 and record it in the `newParts`\n                //   array.  Last, advance both head pointers.\n                //\n                //         oldHead v        v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2, 1,  ,  ,  , 6] <- heads matched: update 1\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n                //                                      & newHead\n                //            newHead ^        ^ newTail\n                //\n                // * As mentioned above, items that were moved as a result of\n                //   being stuck (the final else clause in the code below) are\n                //   marked with null, so we always advance old pointers over\n                //   these so we're comparing the next actual old value on\n                //   either end.\n                //\n                // * Example below: `oldHead` is null (already placed in\n                //   newParts), so advance `oldHead`.\n                //\n                //            oldHead v     v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6] <- old head already used:\n                //   newParts: [0, 2, 1,  ,  ,  , 6]    advance oldHead\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n                //               newHead ^     ^ newTail\n                //\n                // * Note it's not critical to mark old parts as null when they\n                //   are moved from head to tail or tail to head, since they\n                //   will be outside the pointer range and never visited again.\n                //\n                // * Example below: Here the old tail key matches the new head\n                //   key, so the part at the `oldTail` position and move its\n                //   DOM to the new head position (before `oldParts[oldHead]`).\n                //   Last, advance `oldTail` and `newHead` pointers.\n                //\n                //               oldHead v  v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2, 1, 4,  ,  , 6] <- old tail matches new\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]   head: update & move 4,\n                //                                     advance oldTail & newHead\n                //               newHead ^     ^ newTail\n                //\n                // * Example below: Old and new head keys match, so update the\n                //   old head part in place, and advance the `oldHead` and\n                //   `newHead` pointers.\n                //\n                //               oldHead v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2, 1, 4, 3,   ,6] <- heads match: update 3\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance oldHead &\n                //                                      newHead\n                //                  newHead ^  ^ newTail\n                //\n                // * Once the new or old pointers move past each other then all\n                //   we have left is additions (if old list exhausted) or\n                //   removals (if new list exhausted). Those are handled in the\n                //   final while loops at the end.\n                //\n                // * Example below: `oldHead` exceeded `oldTail`, so we're done\n                //   with the main loop.  Create the remaining part and insert\n                //   it at the new head position, and the update is complete.\n                //\n                //                   (oldHead > oldTail)\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2, 1, 4, 3, 7 ,6] <- create and insert 7\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n                //                     newHead ^ newTail\n                //\n                // * Note that the order of the if/else clauses is not\n                //   important to the algorithm, as long as the null checks\n                //   come first (to ensure we're always working on valid old\n                //   parts) and that the final else clause comes last (since\n                //   that's where the expensive moves occur). The order of\n                //   remaining clauses is is just a simple guess at which cases\n                //   will be most common.\n                //\n                // * TODO(kschaaf) Note, we could calculate the longest\n                //   increasing subsequence (LIS) of old items in new position,\n                //   and only move those not in the LIS set. However that costs\n                //   O(nlogn) time and adds a bit more code, and only helps\n                //   make rare types of mutations require fewer moves. The\n                //   above handles removes, adds, reversal, swaps, and single\n                //   moves of contiguous items in linear time, in the minimum\n                //   number of moves. As the number of multiple moves where LIS\n                //   might help approaches a random shuffle, the LIS\n                //   optimization becomes less helpful, so it seems not worth\n                //   the code at this point. Could reconsider if a compelling\n                //   case arises.\n\n                while (oldHead <= oldTail && newHead <= newTail) {\n                  if (oldParts[oldHead] === null) {\n                    // `null` means old part at head has already been used\n                    // below; skip\n                    oldHead++;\n                  } else if (oldParts[oldTail] === null) {\n                    // `null` means old part at tail has already been used\n                    // below; skip\n                    oldTail--;\n                  } else if (oldKeys[oldHead] === newKeys[newHead]) {\n                    // Old head matches new head; update in place\n                    newParts[newHead] =\n                        updatePart(oldParts[oldHead]!, newValues[newHead]);\n                    oldHead++;\n                    newHead++;\n                  } else if (oldKeys[oldTail] === newKeys[newTail]) {\n                    // Old tail matches new tail; update in place\n                    newParts[newTail] =\n                        updatePart(oldParts[oldTail]!, newValues[newTail]);\n                    oldTail--;\n                    newTail--;\n                  } else if (oldKeys[oldHead] === newKeys[newTail]) {\n                    // Old head matches new tail; update and move to new tail\n                    newParts[newTail] =\n                        updatePart(oldParts[oldHead]!, newValues[newTail]);\n                    insertPartBefore(\n                        containerPart,\n                        oldParts[oldHead]!,\n                        newParts[newTail + 1]);\n                    oldHead++;\n                    newTail--;\n                  } else if (oldKeys[oldTail] === newKeys[newHead]) {\n                    // Old tail matches new head; update and move to new head\n                    newParts[newHead] =\n                        updatePart(oldParts[oldTail]!, newValues[newHead]);\n                    insertPartBefore(\n                        containerPart, oldParts[oldTail]!, oldParts[oldHead]!);\n                    oldTail--;\n                    newHead++;\n                  } else {\n                    if (newKeyToIndexMap === undefined) {\n                      // Lazily generate key-to-index maps, used for removals &\n                      // moves below\n                      newKeyToIndexMap = generateMap(newKeys, newHead, newTail);\n                      oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);\n                    }\n                    if (!newKeyToIndexMap.has(oldKeys[oldHead])) {\n                      // Old head is no longer in new list; remove\n                      removePart(oldParts[oldHead]!);\n                      oldHead++;\n                    } else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {\n                      // Old tail is no longer in new list; remove\n                      removePart(oldParts[oldTail]!);\n                      oldTail--;\n                    } else {\n                      // Any mismatches at this point are due to additions or\n                      // moves; see if we have an old part we can reuse and move\n                      // into place\n                      const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);\n                      const oldPart =\n                          oldIndex !== undefined ? oldParts[oldIndex] : null;\n                      if (oldPart === null) {\n                        // No old part for this value; create a new one and\n                        // insert it\n                        const newPart = createAndInsertPart(\n                            containerPart, oldParts[oldHead]!);\n                        updatePart(newPart, newValues[newHead]);\n                        newParts[newHead] = newPart;\n                      } else {\n                        // Reuse old part\n                        newParts[newHead] =\n                            updatePart(oldPart, newValues[newHead]);\n                        insertPartBefore(\n                            containerPart, oldPart, oldParts[oldHead]!);\n                        // This marks the old part as having been used, so that\n                        // it will be skipped in the first two checks above\n                        oldParts[oldIndex as number] = null;\n                      }\n                      newHead++;\n                    }\n                  }\n                }\n                // Add parts for any remaining new values\n                while (newHead <= newTail) {\n                  // For all remaining additions, we insert before last new\n                  // tail, since old pointers are no longer valid\n                  const newPart =\n                      createAndInsertPart(containerPart, newParts[newTail + 1]);\n                  updatePart(newPart, newValues[newHead]);\n                  newParts[newHead++] = newPart;\n                }\n                // Remove any remaining unused old parts\n                while (oldHead <= oldTail) {\n                  const oldPart = oldParts[oldHead++];\n                  if (oldPart !== null) {\n                    removePart(oldPart);\n                  }\n                }\n                // Save order of new parts for next round\n                partListCache.set(containerPart, newParts);\n                keyListCache.set(containerPart, newKeys);\n              };\n            }) as\n    <T>(items: Iterable<T>,\n        keyFnOrTemplate: KeyFn<T>|ItemTemplate<T>,\n        template?: ItemTemplate<T>) => DirectiveFn;\n","const t=function(){function t(){}return t.prototype.then=function(n,r){const o=new t,i=this.s;if(i){const t=1&i?n:r;if(t){try{e(o,1,t(this.v))}catch(t){e(o,2,t)}return o}return this}return this.o=function(t){try{const i=t.v;1&t.s?e(o,1,n?n(i):i):r?e(o,1,r(i)):e(o,2,i)}catch(t){e(o,2,t)}},o},t}();function e(n,r,o){if(!n.s){if(o instanceof t){if(!o.s)return void(o.o=e.bind(null,n,r));1&r&&(r=o.s),o=o.v}if(o&&o.then)return void o.then(e.bind(null,n,r),e.bind(null,n,2));n.s=r,n.v=o;const i=n.o;i&&i(n)}}var n=0,r=\"function\"==typeof WeakMap?WeakMap:function(){var t=\"function\"==typeof Symbol?Symbol(0):\"__weak$\"+ ++n;this.set=function(e,n){e[t]=n},this.get=function(e){return e[t]}};function o(t,e){return new Promise(function(n,r){t.onsuccess=function(){var r=t.result;e&&(r=e(r)),n(r)},t.onerror=function(){r(t.error)}})}function i(t,e){return o(t.openCursor(e),function(t){return t?[t.key,t.value]:[]})}function u(t){return new Promise(function(e,n){t.oncomplete=function(){e()},t.onabort=function(){n(t.error)},t.onerror=function(){n(t.error)}})}function c(t){if(!function(t){if(\"number\"==typeof t||\"string\"==typeof t)return!0;if(\"object\"==typeof t&&t){if(Array.isArray(t))return!0;if(\"setUTCFullYear\"in t)return!0;if(\"function\"==typeof ArrayBuffer&&ArrayBuffer.isView(t))return!0;if(\"byteLength\"in t&&\"length\"in t)return!0}return!1}(t))throw Error(\"kv-storage: The given value is not allowed as a key\")}var f={};function s(t,e){return i(t,a(e))}function a(t){return t===f?IDBKeyRange.lowerBound(-Infinity):IDBKeyRange.lowerBound(t,!0)}var v=new r,h=new r,l=new r,y=new r,d=function(){};function p(n,r){return r(function(r,o){try{function u(){return h.set(n,f),l.set(n,void 0),{value:d,done:void 0===f}}var c=h.get(n);if(void 0===c)return Promise.resolve({value:void 0,done:!0});var f,v,d,p=function(n,r){var o,i=-1;t:{for(var u=0;u<r.length;u++){var c=r[u][0];if(c){var f=c();if(f&&f.then)break t;if(f===n){i=u;break}}else i=u}if(-1!==i){do{for(var s=r[i][1];!s;)s=r[++i][1];var a=s();if(a&&a.then){o=!0;break t}var v=r[i][2];i++}while(v&&!v());return a}}const h=new t,l=e.bind(null,h,2);return(o?a.then(y):f.then(function t(o){for(;;){if(o===n){i=u;break}if(++u===r.length){if(-1!==i)break;return void e(h,1,s)}if(c=r[u][0]){if((o=c())&&o.then)return void o.then(t).then(void 0,l)}else i=u}do{for(var f=r[i][1];!f;)f=r[++i][1];var s=f();if(s&&s.then)return void s.then(y).then(void 0,l);var a=r[i][2];i++}while(a&&!a());e(h,1,s)})).then(void 0,l),h;function y(t){for(;;){var n=r[i][2];if(!n||n())break;for(var o=r[++i][1];!o;)o=r[++i][1];if((t=o())&&t.then)return void t.then(y).then(void 0,l)}e(h,1,t)}}(y.get(n),[[function(){return\"keys\"},function(){return Promise.resolve(function(t,e){return i(t,a(e)).then(function(t){return t[0]})}(o,c)).then(function(t){d=f=t})}],[function(){return\"values\"},function(){return Promise.resolve(s(o,c)).then(function(t){var e;f=(e=t)[0],d=v=e[1]})}],[function(){return\"entries\"},function(){return Promise.resolve(s(o,c)).then(function(t){var e;v=(e=t)[1],d=void 0===(f=e[0])?void 0:[f,v]})}]]);return Promise.resolve(p&&p.then?p.then(u):u())}catch(t){return Promise.reject(t)}})}function m(t,e){var n=new d;return y.set(n,t),v.set(n,e),h.set(n,f),l.set(n,void 0),n}d.prototype.return=function(){h.set(this,void 0)},d.prototype.next=function(){var t=this,e=v.get(this);if(!e)return Promise.reject(new TypeError(\"Invalid this value\"));var n,r=l.get(this);return n=void 0!==r?r.then(function(){return p(t,e)}):p(this,e),l.set(this,n),n},\"function\"==typeof Symbol&&Symbol.asyncIterator&&(d.prototype[Symbol.asyncIterator]=function(){return this});var b=function(t,e,n){try{return null===w.get(t)&&function(t){var e=g.get(t);w.set(t,new Promise(function(n,r){var o=self.indexedDB.open(e,1);o.onsuccess=function(){var i=o.result;(function(t,e,n){if(1!==t.objectStoreNames.length)return n(S(e)),!1;if(t.objectStoreNames[0]!==P)return n(S(e)),!1;var r=t.transaction(P,\"readonly\").objectStore(P);return!(r.autoIncrement||r.keyPath||r.indexNames.length)||(n(S(e)),!1)})(i,e,r)&&(i.onclose=function(){w.set(t,null)},i.onversionchange=function(){i.close(),w.set(t,null)},n(i))},o.onerror=function(){return r(o.error)},o.onupgradeneeded=function(){try{o.result.createObjectStore(P)}catch(t){r(t)}}}))}(t),Promise.resolve(w.get(t)).then(function(t){var r=t.transaction(P,e),o=r.objectStore(P);return n(r,o)})}catch(t){return Promise.reject(t)}},g=new r,w=new r,P=\"store\",k=function(t){var e=\"kv-storage:\"+t;w.set(this,null),g.set(this,e),this.backingStore={database:e,store:P,version:1}};function S(t){return new Error('kv-storage: database \"'+t+'\" corrupted')}k.prototype.set=function(t,e){try{return c(t),b(this,\"readwrite\",function(n,r){return void 0===e?r.delete(t):r.put(e,t),u(n)})}catch(t){return Promise.reject(t)}},k.prototype.get=function(t){try{return c(t),b(this,\"readonly\",function(e,n){return o(n.get(t))})}catch(t){return Promise.reject(t)}},k.prototype.delete=function(t){try{return c(t),b(this,\"readwrite\",function(e,n){return n.delete(t),u(e)})}catch(t){return Promise.reject(t)}},k.prototype.clear=function(){try{var t=this;function e(){function e(){return o(self.indexedDB.deleteDatabase(g.get(t)))}var r=function(){if(n){try{n.close()}catch(t){}return Promise.resolve(new Promise(setTimeout)).then(function(){})}}();return r&&r.then?r.then(e):e()}var n,r=w.get(t),i=function(){if(null!==r){function e(){w.set(t,null)}var o=function(t,e){try{var o=Promise.resolve(r).then(function(t){n=t})}catch(t){return}return o&&o.then?o.then(void 0,function(){}):o}();return o&&o.then?o.then(e):e()}}();return i&&i.then?i.then(e):e()}catch(t){return Promise.reject(t)}},k.prototype.keys=function(){var t=this;return m(\"keys\",function(e){return b(t,\"readonly\",e)})},k.prototype.values=function(){var t=this;return m(\"values\",function(e){return b(t,\"readonly\",e)})},k.prototype.entries=function(){var t=this;return m(\"entries\",function(e){return b(t,\"readonly\",e)})},\"function\"==typeof Symbol&&Symbol.asyncIterator&&(k.prototype[Symbol.asyncIterator]=k.prototype.entries);export default new k(\"default\");export{k as StorageArea};\n//# sourceMappingURL=kv-storage-polyfill.mjs.map\n"],"names":["AttributePart","directive","previousValues","WeakMap","ifDefined","value","part","previousValue","get","undefined","has","name","committer","element","removeAttribute","setValue","set","createMarker","NodePart","removeNodes","reparentNodes","createAndInsertPart","containerPart","beforePart","container","startNode","parentNode","beforeNode","endNode","insertBefore","newPart","options","insertAfterNode","updatePart","commit","insertPartBefore","ref","nextSibling","removePart","generateMap","list","start","end","map","Map","i","partListCache","keyListCache","repeat","items","keyFnOrTemplate","template","keyFn","Error","oldParts","oldKeys","newParts","newValues","newKeys","index","_iterator","_createForOfIteratorHelper","_step","s","n","done","item","err","e","f","newKeyToIndexMap","oldKeyToIndexMap","oldHead","oldTail","length","newHead","newTail","oldIndex","oldPart"],"sourceRoot":""}