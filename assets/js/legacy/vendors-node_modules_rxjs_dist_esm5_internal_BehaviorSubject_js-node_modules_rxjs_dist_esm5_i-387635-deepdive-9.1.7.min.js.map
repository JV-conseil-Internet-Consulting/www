{"version":3,"file":"legacy/vendors-node_modules_rxjs_dist_esm5_internal_BehaviorSubject_js-node_modules_rxjs_dist_esm5_i-387635-deepdive-9.1.7.min.js","mappings":"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","sources":["webpack://deepdive/../../../src/internal/BehaviorSubject.ts","webpack://deepdive/../../../../src/internal/observable/defer.ts","webpack://deepdive/../../../../src/internal/observable/timer.ts","webpack://deepdive/../../../../src/internal/operators/distinctUntilChanged.ts","webpack://deepdive/../../../../src/internal/operators/finalize.ts","webpack://deepdive/../../../../src/internal/operators/mapTo.ts","webpack://deepdive/../../../../src/internal/operators/take.ts","webpack://deepdive/../../../../src/internal/operators/takeUntil.ts","webpack://deepdive/../../../../src/internal/util/isDate.ts","webpack://deepdive/../src/element.ts","webpack://deepdive/../src/index.ts","webpack://deepdive/../src/lib/css-tag.ts","webpack://deepdive/../src/lib/decorators.ts","webpack://deepdive/../src/lib/updating-element.ts","webpack://deepdive/src/lit-element.ts","webpack://deepdive/../src/lib/default-template-processor.ts","webpack://deepdive/../src/lib/directive.ts","webpack://deepdive/../src/lib/dom.ts","webpack://deepdive/../src/lib/modify-template.ts","webpack://deepdive/../src/lib/part.ts","webpack://deepdive/../src/lib/parts.ts","webpack://deepdive/../src/lib/render.ts","webpack://deepdive/../src/lib/shady-render.ts","webpack://deepdive/../src/lib/template-factory.ts","webpack://deepdive/../src/lib/template-instance.ts","webpack://deepdive/../src/lib/template-result.ts","webpack://deepdive/../src/lib/template.ts","webpack://deepdive/src/lit-html.ts"],"sourcesContent":[null,null,null,null,null,null,null,null,null,"import { LitElement } from \"lit-element\";\nimport { Subject } from \"rxjs\";\n\nexport class RxLitElement extends LitElement {\n  $connected = new Subject<boolean>();\n\n  connectedCallback() { \n    super.connectedCallback();\n    this.$connected.next(true);\n  }\n\n  disconnectedCallback() { \n    super.disconnectedCallback();\n    this.$connected.next(false);\n  }\n\n  #firstUpdate!: boolean;\n\n  $: any = {};\n\n  firstUpdated() {\n    this.#firstUpdate = true;\n  }\n\n  updated(changedProperties: Map<string, any>) {\n    if (!this.#firstUpdate) for (const prop of changedProperties.keys()) {\n      if (prop in this.$) this.$[prop].next((<any>this)[prop]);\n    }\n    this.#firstUpdate = false;\n  }\n\n  fireEvent<T>(name: string, eventInitDict?: CustomEventInit<T>) {\n    this.dispatchEvent(new CustomEvent(name, eventInitDict));\n    this.dispatchEvent(new CustomEvent(`${this.tagName.toLowerCase()}-${name}`, eventInitDict));\n  }\n}\n\nexport function applyMixins<T>(derivedCtor: Constructor<T>, baseCtors: Constructor<any>[]) {\n  baseCtors.forEach(baseCtor => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    });\n  });\n  return derivedCtor;\n}","export * from './creators';\nexport * from './element';\nexport * from './observers';\nexport * from './operators';\nexport * from './util';\n","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nexport const supportsAdoptingStyleSheets = (window.ShadowRoot) &&\n    (window.ShadyCSS === undefined || window.ShadyCSS.nativeShadow) &&\n    ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\n\nconst constructionToken = Symbol();\n\nexport class CSSResult {\n  _styleSheet?: CSSStyleSheet|null;\n\n  readonly cssText: string;\n\n  constructor(cssText: string, safeToken: symbol) {\n    if (safeToken !== constructionToken) {\n      throw new Error(\n          'CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n    }\n\n    this.cssText = cssText;\n  }\n\n  // Note, this is a getter so that it's lazy. In practice, this means\n  // stylesheets are not created until the first element instance is made.\n  get styleSheet(): CSSStyleSheet|null {\n    if (this._styleSheet === undefined) {\n      // Note, if `supportsAdoptingStyleSheets` is true then we assume\n      // CSSStyleSheet is constructable.\n      if (supportsAdoptingStyleSheets) {\n        this._styleSheet = new CSSStyleSheet();\n        this._styleSheet.replaceSync(this.cssText);\n      } else {\n        this._styleSheet = null;\n      }\n    }\n    return this._styleSheet;\n  }\n\n  toString(): string {\n    return this.cssText;\n  }\n}\n\n/**\n * Wrap a value for interpolation in a [[`css`]] tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value: unknown) => {\n  return new CSSResult(String(value), constructionToken);\n};\n\nconst textFromCSSResult = (value: CSSResult|number) => {\n  if (value instanceof CSSResult) {\n    return value.cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(\n        `Value passed to 'css' function must be a 'css' function result: ${\n            value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n  }\n};\n\n/**\n * Template tag which which can be used with LitElement's [[LitElement.styles |\n * `styles`]] property to set element styles. For security reasons, only literal\n * string values may be used. To incorporate non-literal values [[`unsafeCSS`]]\n * may be used inside a template string part.\n */\nexport const css =\n    (strings: TemplateStringsArray, ...values: (CSSResult|number)[]) => {\n      const cssText = values.reduce(\n          (acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1],\n          strings[0]);\n      return new CSSResult(cssText, constructionToken);\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure Compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {LitElement} from '../lit-element.js';\n\nimport {PropertyDeclaration, UpdatingElement} from './updating-element.js';\n\nexport type Constructor<T> = {\n  // tslint:disable-next-line:no-any\n  new (...args: any[]): T\n};\n\n// From the TC39 Decorators proposal\ninterface ClassDescriptor {\n  kind: 'class';\n  elements: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => undefined | Constructor<T>;\n}\n\n// From the TC39 Decorators proposal\ninterface ClassElement {\n  kind: 'field'|'method';\n  key: PropertyKey;\n  placement: 'static'|'prototype'|'own';\n  initializer?: Function;\n  extras?: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => undefined | Constructor<T>;\n  descriptor?: PropertyDescriptor;\n}\n\nconst legacyCustomElement =\n    (tagName: string, clazz: Constructor<HTMLElement>) => {\n      window.customElements.define(tagName, clazz);\n      // Cast as any because TS doesn't recognize the return type as being a\n      // subtype of the decorated class when clazz is typed as\n      // `Constructor<HTMLElement>` for some reason.\n      // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n      // applied to elements however.\n      // tslint:disable-next-line:no-any\n      return clazz as any;\n    };\n\nconst standardCustomElement =\n    (tagName: string, descriptor: ClassDescriptor) => {\n      const {kind, elements} = descriptor;\n      return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz: Constructor<HTMLElement>) {\n          window.customElements.define(tagName, clazz);\n        }\n      };\n    };\n\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * ```\n * @customElement('my-element')\n * class MyElement {\n *   render() {\n *     return html``;\n *   }\n * }\n * ```\n * @category Decorator\n * @param tagName The name of the custom element to define.\n */\nexport const customElement = (tagName: string) =>\n    (classOrDescriptor: Constructor<HTMLElement>|ClassDescriptor) =>\n        (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\n\nconst standardProperty =\n    (options: PropertyDeclaration, element: ClassElement) => {\n      // When decorating an accessor, pass it through and add property metadata.\n      // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n      // stomp over the user's accessor.\n      if (element.kind === 'method' && element.descriptor &&\n          !('value' in element.descriptor)) {\n        return {\n          ...element,\n          finisher(clazz: typeof UpdatingElement) {\n            clazz.createProperty(element.key, options);\n          }\n        };\n      } else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n          kind: 'field',\n          key: Symbol(),\n          placement: 'own',\n          descriptor: {},\n          // When @babel/plugin-proposal-decorators implements initializers,\n          // do this instead of the initializer below. See:\n          // https://github.com/babel/babel/issues/9260 extras: [\n          //   {\n          //     kind: 'initializer',\n          //     placement: 'own',\n          //     initializer: descriptor.initializer,\n          //   }\n          // ],\n          initializer(this: {[key: string]: unknown}) {\n            if (typeof element.initializer === 'function') {\n              this[element.key as string] = element.initializer.call(this);\n            }\n          },\n          finisher(clazz: typeof UpdatingElement) {\n            clazz.createProperty(element.key, options);\n          }\n        };\n      }\n    };\n\nconst legacyProperty =\n    (options: PropertyDeclaration, proto: Object, name: PropertyKey) => {\n      (proto.constructor as typeof UpdatingElement)\n          .createProperty(name, options);\n    };\n\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A [[`PropertyDeclaration`]] may optionally be\n * supplied to configure property features.\n *\n * This decorator should only be used for public fields. Private or protected\n * fields should use the [[`internalProperty`]] decorator.\n *\n * @example\n * ```ts\n * class MyElement {\n *   @property({ type: Boolean })\n *   clicked = false;\n * }\n * ```\n * @category Decorator\n * @ExportDecoratedItems\n */\nexport function property(options?: PropertyDeclaration) {\n  // tslint:disable-next-line:no-any decorator\n  return (protoOrDescriptor: Object|ClassElement, name?: PropertyKey): any =>\n             (name !== undefined) ?\n      legacyProperty(options!, protoOrDescriptor as Object, name) :\n      standardProperty(options!, protoOrDescriptor as ClassElement);\n}\n\nexport interface InternalPropertyDeclaration<Type = unknown> {\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n}\n\n/**\n * Declares a private or protected property that still triggers updates to the\n * element when it changes.\n *\n * Properties declared this way must not be used from HTML or HTML templating\n * systems, they're solely for properties internal to the element. These\n * properties may be renamed by optimization tools like the Closure Compiler.\n * @category Decorator\n * @deprecated `internalProperty` has been renamed to `state` in lit-element\n *     3.0. Please update to `state` now to be compatible with 3.0.\n */\nexport function internalProperty(options?: InternalPropertyDeclaration) {\n  return property({attribute: false, hasChanged: options?.hasChanged});\n}\n\n/**\n * Declares a private or protected property that still triggers updates to the\n * element when it changes.\n *\n * Properties declared this way must not be used from HTML or HTML templating\n * systems, they're solely for properties internal to the element. These\n * properties may be renamed by optimization tools like the Closure Compiler.\n * @category Decorator\n */\nexport const state = (options?: InternalPropertyDeclaration) =>\n    internalProperty(options);\n\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n * @param cache An optional boolean which when true performs the DOM query only\n * once and caches the result.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n *\n * ```ts\n * class MyElement {\n *   @query('#first')\n *   first;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function query(selector: string, cache?: boolean) {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      get(this: LitElement) {\n        return this.renderRoot.querySelector(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    if (cache) {\n      const prop =\n          name !== undefined ? name : (protoOrDescriptor as ClassElement).key;\n      const key = typeof prop === 'symbol' ? Symbol() : `__${prop}`;\n      descriptor.get = function(this: LitElement) {\n        if ((this as unknown as\n             {[key: string]: Element | null})[key as string] === undefined) {\n          ((this as unknown as {[key: string]: Element | null})[key as string] =\n               this.renderRoot.querySelector(selector));\n        }\n        return (\n            this as unknown as {[key: string]: Element | null})[key as string];\n      };\n    }\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n\n// Note, in the future, we may extend this decorator to support the use case\n// where the queried element may need to do work to become ready to interact\n// with (e.g. load some implementation code). If so, we might elect to\n// add a second argument defining a function that can be run to make the\n// queried element loaded/updated/ready.\n/**\n * A property decorator that converts a class property into a getter that\n * returns a promise that resolves to the result of a querySelector on the\n * element's renderRoot done after the element's `updateComplete` promise\n * resolves. When the queried property may change with element state, this\n * decorator can be used instead of requiring users to await the\n * `updateComplete` before accessing the property.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n * ```ts\n * class MyElement {\n *   @queryAsync('#first')\n *   first;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n *\n * // external usage\n * async doSomethingWithFirst() {\n *  (await aMyElement.first).doSomething();\n * }\n * ```\n * @category Decorator\n */\nexport function queryAsync(selector: string) {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      async get(this: LitElement) {\n        await this.updateComplete;\n        return this.renderRoot.querySelector(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\n *\n * @example\n * ```ts\n * class MyElement {\n *   @queryAll('div')\n *   divs;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function queryAll(selector: string) {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      get(this: LitElement) {\n        return this.renderRoot.querySelectorAll(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n\nconst legacyQuery =\n    (descriptor: PropertyDescriptor, proto: Object, name: PropertyKey) => {\n      Object.defineProperty(proto, name, descriptor);\n    };\n\nconst standardQuery = (descriptor: PropertyDescriptor, element: ClassElement) =>\n    ({\n      kind: 'method',\n      placement: 'prototype',\n      key: element.key,\n      descriptor,\n    });\n\nconst standardEventOptions =\n    (options: AddEventListenerOptions, element: ClassElement) => {\n      return {\n        ...element,\n        finisher(clazz: typeof UpdatingElement) {\n          Object.assign(\n              clazz.prototype[element.key as keyof UpdatingElement], options);\n        }\n      };\n    };\n\nconst legacyEventOptions =\n    // tslint:disable-next-line:no-any legacy decorator\n    (options: AddEventListenerOptions, proto: any, name: PropertyKey) => {\n      Object.assign(proto[name], options);\n    };\n\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifies event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n * ```ts\n * class MyElement {\n *   clicked = false;\n *\n *   render() {\n *     return html`\n *       <div @click=${this._onClick}`>\n *         <button></button>\n *       </div>\n *     `;\n *   }\n *\n *   @eventOptions({capture: true})\n *   _onClick(e) {\n *     this.clicked = true;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function eventOptions(options: AddEventListenerOptions) {\n  // Return value typed as any to prevent TypeScript from complaining that\n  // standard decorator function signature does not match TypeScript decorator\n  // signature\n  // TODO(kschaaf): unclear why it was only failing on this decorator and not\n  // the others\n  return ((protoOrDescriptor: Object|ClassElement, name?: string) =>\n              (name !== undefined) ?\n              legacyEventOptions(options, protoOrDescriptor as Object, name) :\n              standardEventOptions(\n                  options, protoOrDescriptor as ClassElement)) as\n             // tslint:disable-next-line:no-any decorator\n             any;\n}\n\n// x-browser support for matches\n// tslint:disable-next-line:no-any\nconst ElementProto = Element.prototype as any;\nconst legacyMatches =\n    ElementProto.msMatchesSelector || ElementProto.webkitMatchesSelector;\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedNodes` of the given named `slot`. Note, the type of\n * this property should be annotated as `NodeListOf<HTMLElement>`.\n *\n * @param slotName A string name of the slot.\n * @param flatten A boolean which when true flattens the assigned nodes,\n * meaning any assigned nodes that are slot elements are replaced with their\n * assigned nodes.\n * @param selector A string which filters the results to elements that match\n * the given css selector.\n *\n * * @example\n * ```ts\n * class MyElement {\n *   @queryAssignedNodes('list', true, '.item')\n *   listItems;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function queryAssignedNodes(\n    slotName = '', flatten = false, selector = '') {\n  return (protoOrDescriptor: Object|ClassElement,\n          // tslint:disable-next-line:no-any decorator\n          name?: PropertyKey): any => {\n    const descriptor = {\n      get(this: LitElement) {\n        const slotSelector =\n            `slot${slotName ? `[name=${slotName}]` : ':not([name])'}`;\n        const slot = this.renderRoot.querySelector(slotSelector);\n        let nodes = slot && (slot as HTMLSlotElement).assignedNodes({flatten});\n        if (nodes && selector) {\n          nodes = nodes.filter(\n              (node) => node.nodeType === Node.ELEMENT_NODE &&\n                  // tslint:disable-next-line:no-any testing existence on older browsers\n                  ((node as any).matches ?\n                       (node as Element).matches(selector) :\n                       legacyMatches.call(node as Element, selector)));\n        }\n        return nodes;\n      },\n      enumerable: true,\n      configurable: true,\n    };\n    return (name !== undefined) ?\n        legacyQuery(descriptor, protoOrDescriptor as Object, name) :\n        standardQuery(descriptor, protoOrDescriptor as ClassElement);\n  };\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * Use this module if you want to create your own base class extending\n * [[UpdatingElement]].\n * @packageDocumentation\n */\n\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    <P extends PropertyKey>(prop: P, _obj: unknown): P => prop;\n\ndeclare global {\n  var JSCompiler_renameProperty: <P extends PropertyKey>(\n      prop: P, _obj: unknown) => P;\n\n  interface Window {\n    JSCompiler_renameProperty: typeof JSCompiler_renameProperty;\n  }\n}\n\n/**\n * Converts property values to and from attribute values.\n */\nexport interface ComplexAttributeConverter<Type = unknown, TypeHint = unknown> {\n  /**\n   * Function called to convert an attribute value to a property\n   * value.\n   */\n  fromAttribute?(value: string|null, type?: TypeHint): Type;\n\n  /**\n   * Function called to convert a property value to an attribute\n   * value.\n   *\n   * It returns unknown instead of string, to be compatible with\n   * https://github.com/WICG/trusted-types (and similar efforts).\n   */\n  toAttribute?(value: Type, type?: TypeHint): unknown;\n}\n\ntype AttributeConverter<Type = unknown, TypeHint = unknown> =\n    ComplexAttributeConverter<Type>|\n    ((value: string|null, type?: TypeHint) => Type);\n\n/**\n * Defines options for a property accessor.\n */\nexport interface PropertyDeclaration<Type = unknown, TypeHint = unknown> {\n  /**\n   * Indicates how and whether the property becomes an observed attribute.\n   * If the value is `false`, the property is not added to `observedAttributes`.\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\n   * becomes `foobar`). If a string, the string value is observed (e.g\n   * `attribute: 'foo-bar'`).\n   */\n  readonly attribute?: boolean|string;\n\n  /**\n   * Indicates the type of the property. This is used only as a hint for the\n   * `converter` to determine how to convert the attribute\n   * to/from a property.\n   */\n  readonly type?: TypeHint;\n\n  /**\n   * Indicates how to convert the attribute to/from a property. If this value\n   * is a function, it is used to convert the attribute value a the property\n   * value. If it's an object, it can have keys for `fromAttribute` and\n   * `toAttribute`. If no `toAttribute` function is provided and\n   * `reflect` is set to `true`, the property value is set directly to the\n   * attribute. A default `converter` is used if none is provided; it supports\n   * `Boolean`, `String`, `Number`, `Object`, and `Array`. Note,\n   * when a property changes and the converter is used to update the attribute,\n   * the property is never updated again as a result of the attribute changing,\n   * and vice versa.\n   */\n  readonly converter?: AttributeConverter<Type, TypeHint>;\n\n  /**\n   * Indicates if the property should reflect to an attribute.\n   * If `true`, when the property is set, the attribute is set using the\n   * attribute name determined according to the rules for the `attribute`\n   * property option and the value of the property converted using the rules\n   * from the `converter` property option.\n   */\n  readonly reflect?: boolean;\n\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n\n  /**\n   * Indicates whether an accessor will be created for this property. By\n   * default, an accessor will be generated for this property that requests an\n   * update when set. If this flag is `true`, no accessor will be created, and\n   * it will be the user's responsibility to call\n   * `this.requestUpdate(propertyName, oldValue)` to request an update when\n   * the property changes.\n   */\n  readonly noAccessor?: boolean;\n}\n\n/**\n * Map of properties to PropertyDeclaration options. For each property an\n * accessor is made, and the property is processed according to the\n * PropertyDeclaration options.\n */\nexport interface PropertyDeclarations {\n  readonly [key: string]: PropertyDeclaration;\n}\n\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\n\ntype AttributeMap = Map<string, PropertyKey>;\n\n/**\n * Map of changed properties with old values. Takes an optional generic\n * interface corresponding to the declared element properties.\n */\n// tslint:disable-next-line:no-any\nexport type PropertyValues<T = any> =\n    keyof T extends PropertyKey ? Map<keyof T, unknown>: never;\n\nexport const defaultConverter: ComplexAttributeConverter = {\n\n  toAttribute(value: unknown, type?: unknown): unknown {\n    switch (type) {\n      case Boolean:\n        return value ? '' : null;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        return value == null ? value : JSON.stringify(value);\n    }\n    return value;\n  },\n\n  fromAttribute(value: string|null, type?: unknown) {\n    switch (type) {\n      case Boolean:\n        return value !== null;\n      case Number:\n        return value === null ? null : Number(value);\n      case Object:\n      case Array:\n        // Type assert to adhere to Bazel's \"must type assert JSON parse\" rule.\n        return JSON.parse(value!) as unknown;\n    }\n    return value;\n  }\n\n};\n\nexport interface HasChanged {\n  (value: unknown, old: unknown): boolean;\n}\n\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean => {\n  // This ensures (old==NaN, value==NaN) always returns false\n  return old !== value && (old === old || value === value);\n};\n\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual\n};\n\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\ntype UpdateState = typeof STATE_HAS_UPDATED|typeof STATE_UPDATE_REQUESTED|\n    typeof STATE_IS_REFLECTING_TO_ATTRIBUTE|\n    typeof STATE_IS_REFLECTING_TO_PROPERTY;\n\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n * @noInheritDoc\n */\nexport abstract class UpdatingElement extends HTMLElement {\n  /*\n   * Due to closure compiler ES6 compilation bugs, @nocollapse is required on\n   * all static methods and properties with initializers.  Reference:\n   * - https://github.com/google/closure-compiler/issues/1776\n   */\n\n  /**\n   * Maps attribute names to properties; for example `foobar` attribute to\n   * `fooBar` property. Created lazily on user subclasses when finalizing the\n   * class.\n   */\n  private static _attributeToPropertyMap: AttributeMap;\n\n  /**\n   * Marks class as having finished creating properties.\n   */\n  protected static[finalized] = true;\n\n  /**\n   * Memoized list of all class properties, including any superclass properties.\n   * Created lazily on user subclasses when finalizing the class.\n   */\n  private static _classProperties?: PropertyDeclarationMap;\n\n  /**\n   * User-supplied object that maps property names to `PropertyDeclaration`\n   * objects containing options for configuring the property.\n   */\n  static properties: PropertyDeclarations;\n\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   */\n  static get observedAttributes() {\n    // note: piggy backing on this to ensure we're finalized.\n    this.finalize();\n    const attributes: string[] = [];\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    this._classProperties!.forEach((v, p) => {\n      const attr = this._attributeNameForProperty(p, v);\n      if (attr !== undefined) {\n        this._attributeToPropertyMap.set(attr, p);\n        attributes.push(attr);\n      }\n    });\n    return attributes;\n  }\n\n  /**\n   * Ensures the private `_classProperties` property metadata is created.\n   * In addition to `finalize` this is also called in `createProperty` to\n   * ensure the `@property` decorator can add property metadata.\n   */\n  /** @nocollapse */\n  private static _ensureClassProperties() {\n    // ensure private storage for property declarations.\n    if (!this.hasOwnProperty(\n            JSCompiler_renameProperty('_classProperties', this))) {\n      this._classProperties = new Map();\n      // NOTE: Workaround IE11 not supporting Map constructor argument.\n      const superProperties: PropertyDeclarationMap =\n          Object.getPrototypeOf(this)._classProperties;\n      if (superProperties !== undefined) {\n        superProperties.forEach(\n            (v: PropertyDeclaration, k: PropertyKey) =>\n                this._classProperties!.set(k, v));\n      }\n    }\n  }\n\n  /**\n   * Creates a property accessor on the element prototype if one does not exist\n   * and stores a PropertyDeclaration for the property with the given options.\n   * The property setter calls the property's `hasChanged` property option\n   * or uses a strict identity check to determine whether or not to request\n   * an update.\n   *\n   * This method may be overridden to customize properties; however,\n   * when doing so, it's important to call `super.createProperty` to ensure\n   * the property is setup correctly. This method calls\n   * `getPropertyDescriptor` internally to get a descriptor to install.\n   * To customize what properties do when they are get or set, override\n   * `getPropertyDescriptor`. To customize the options for a property,\n   * implement `createProperty` like this:\n   *\n   * static createProperty(name, options) {\n   *   options = Object.assign(options, {myOption: true});\n   *   super.createProperty(name, options);\n   * }\n   *\n   * @nocollapse\n   */\n  static createProperty(\n      name: PropertyKey,\n      options: PropertyDeclaration = defaultPropertyDeclaration) {\n    // Note, since this can be called by the `@property` decorator which\n    // is called before `finalize`, we ensure storage exists for property\n    // metadata.\n    this._ensureClassProperties();\n    this._classProperties!.set(name, options);\n    // Do not generate an accessor if the prototype already has one, since\n    // it would be lost otherwise and that would never be the user's intention;\n    // Instead, we expect users to call `requestUpdate` themselves from\n    // user-defined accessors. Note that if the super has an accessor we will\n    // still overwrite it\n    if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n      return;\n    }\n    const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n    const descriptor = this.getPropertyDescriptor(name, key, options);\n    if (descriptor !== undefined) {\n      Object.defineProperty(this.prototype, name, descriptor);\n    }\n  }\n\n  /**\n   * Returns a property descriptor to be defined on the given named property.\n   * If no descriptor is returned, the property will not become an accessor.\n   * For example,\n   *\n   *   class MyElement extends LitElement {\n   *     static getPropertyDescriptor(name, key, options) {\n   *       const defaultDescriptor =\n   *           super.getPropertyDescriptor(name, key, options);\n   *       const setter = defaultDescriptor.set;\n   *       return {\n   *         get: defaultDescriptor.get,\n   *         set(value) {\n   *           setter.call(this, value);\n   *           // custom action.\n   *         },\n   *         configurable: true,\n   *         enumerable: true\n   *       }\n   *     }\n   *   }\n   *\n   * @nocollapse\n   */\n  protected static getPropertyDescriptor(\n      name: PropertyKey, key: string|symbol, options: PropertyDeclaration) {\n    return {\n      // tslint:disable-next-line:no-any no symbol in index\n      get(): any {\n        return (this as {[key: string]: unknown})[key as string];\n      },\n      set(this: UpdatingElement, value: unknown) {\n        const oldValue =\n            (this as {} as {[key: string]: unknown})[name as string];\n        (this as {} as {[key: string]: unknown})[key as string] = value;\n        (this as unknown as UpdatingElement)\n            .requestUpdateInternal(name, oldValue, options);\n      },\n      configurable: true,\n      enumerable: true\n    };\n  }\n\n  /**\n   * Returns the property options associated with the given property.\n   * These options are defined with a PropertyDeclaration via the `properties`\n   * object or the `@property` decorator and are registered in\n   * `createProperty(...)`.\n   *\n   * Note, this method should be considered \"final\" and not overridden. To\n   * customize the options for a given property, override `createProperty`.\n   *\n   * @nocollapse\n   * @final\n   */\n  protected static getPropertyOptions(name: PropertyKey) {\n    return this._classProperties && this._classProperties.get(name) ||\n        defaultPropertyDeclaration;\n  }\n\n  /**\n   * Creates property accessors for registered properties and ensures\n   * any superclasses are also finalized.\n   * @nocollapse\n   */\n  protected static finalize() {\n    // finalize any superclasses\n    const superCtor = Object.getPrototypeOf(this);\n    if (!superCtor.hasOwnProperty(finalized)) {\n      superCtor.finalize();\n    }\n    this[finalized] = true;\n    this._ensureClassProperties();\n    // initialize Map populated in observedAttributes\n    this._attributeToPropertyMap = new Map();\n    // make any properties\n    // Note, only process \"own\" properties since this element will inherit\n    // any properties defined on the superClass, and finalization ensures\n    // the entire prototype chain is finalized.\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties;\n      // support symbols in properties (IE11 does not support this)\n      const propKeys = [\n        ...Object.getOwnPropertyNames(props),\n        ...(typeof Object.getOwnPropertySymbols === 'function') ?\n            Object.getOwnPropertySymbols(props) :\n            []\n      ];\n      // This for/of is ok because propKeys is an array\n      for (const p of propKeys) {\n        // note, use of `any` is due to TypeSript lack of support for symbol in\n        // index types\n        // tslint:disable-next-line:no-any no symbol in index\n        this.createProperty(p, (props as any)[p]);\n      }\n    }\n  }\n\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n  private static _attributeNameForProperty(\n      name: PropertyKey, options: PropertyDeclaration) {\n    const attribute = options.attribute;\n    return attribute === false ?\n        undefined :\n        (typeof attribute === 'string' ?\n             attribute :\n             (typeof name === 'string' ? name.toLowerCase() : undefined));\n  }\n\n  /**\n   * Returns true if a property should request an update.\n   * Called when a property value is set and uses the `hasChanged`\n   * option for the property if present or a strict identity check.\n   * @nocollapse\n   */\n  private static _valueHasChanged(\n      value: unknown, old: unknown, hasChanged: HasChanged = notEqual) {\n    return hasChanged(value, old);\n  }\n\n  /**\n   * Returns the property value for the given attribute value.\n   * Called via the `attributeChangedCallback` and uses the property's\n   * `converter` or `converter.fromAttribute` property option.\n   * @nocollapse\n   */\n  private static _propertyValueFromAttribute(\n      value: string|null, options: PropertyDeclaration) {\n    const type = options.type;\n    const converter = options.converter || defaultConverter;\n    const fromAttribute =\n        (typeof converter === 'function' ? converter : converter.fromAttribute);\n    return fromAttribute ? fromAttribute(value, type) : value;\n  }\n\n  /**\n   * Returns the attribute value for the given property value. If this\n   * returns undefined, the property will *not* be reflected to an attribute.\n   * If this returns null, the attribute will be removed, otherwise the\n   * attribute will be set to the value.\n   * This uses the property's `reflect` and `type.toAttribute` property options.\n   * @nocollapse\n   */\n  private static _propertyValueToAttribute(\n      value: unknown, options: PropertyDeclaration) {\n    if (options.reflect === undefined) {\n      return;\n    }\n    const type = options.type;\n    const converter = options.converter;\n    const toAttribute =\n        converter && (converter as ComplexAttributeConverter).toAttribute ||\n        defaultConverter.toAttribute;\n    return toAttribute!(value, type);\n  }\n\n  private _updateState!: UpdateState;\n  private _instanceProperties?: PropertyValues;\n  // Initialize to an unresolved Promise so we can make sure the element has\n  // connected before first update.\n  private _updatePromise!: Promise<unknown>;\n  private _enableUpdatingResolver: ((r?: unknown) => void)|undefined;\n\n  /**\n   * Map with keys for any properties that have changed since the last\n   * update cycle with previous values.\n   */\n  private _changedProperties!: PropertyValues;\n\n  /**\n   * Map with keys of properties that should be reflected when updated.\n   */\n  private _reflectingProperties?: Map<PropertyKey, PropertyDeclaration>;\n\n  constructor() {\n    super();\n    this.initialize();\n  }\n\n  /**\n   * Performs element initialization. By default captures any pre-set values for\n   * registered properties.\n   */\n  protected initialize() {\n    this._updateState = 0;\n    this._updatePromise =\n        new Promise((res) => this._enableUpdatingResolver = res);\n    this._changedProperties = new Map();\n    this._saveInstanceProperties();\n    // ensures first update will be caught by an early access of\n    // `updateComplete`\n    this.requestUpdateInternal();\n  }\n\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n  private _saveInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    (this.constructor as typeof UpdatingElement)\n        ._classProperties!.forEach((_v, p) => {\n          if (this.hasOwnProperty(p)) {\n            const value = this[p as keyof this];\n            delete this[p as keyof this];\n            if (!this._instanceProperties) {\n              this._instanceProperties = new Map();\n            }\n            this._instanceProperties.set(p, value);\n          }\n        });\n  }\n\n  /**\n   * Applies previously saved instance properties.\n   */\n  private _applyInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    // tslint:disable-next-line:no-any\n    this._instanceProperties!.forEach((v, p) => (this as any)[p] = v);\n    this._instanceProperties = undefined;\n  }\n\n  connectedCallback() {\n    // Ensure first connection completes an update. Updates cannot complete\n    // before connection.\n    this.enableUpdating();\n  }\n\n  protected enableUpdating() {\n    if (this._enableUpdatingResolver !== undefined) {\n      this._enableUpdatingResolver();\n      this._enableUpdatingResolver = undefined;\n    }\n  }\n\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   */\n  disconnectedCallback() {\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   */\n  attributeChangedCallback(name: string, old: string|null, value: string|null) {\n    if (old !== value) {\n      this._attributeToProperty(name, value);\n    }\n  }\n\n  private _propertyToAttribute(\n      name: PropertyKey, value: unknown,\n      options: PropertyDeclaration = defaultPropertyDeclaration) {\n    const ctor = (this.constructor as typeof UpdatingElement);\n    const attr = ctor._attributeNameForProperty(name, options);\n    if (attr !== undefined) {\n      const attrValue = ctor._propertyValueToAttribute(value, options);\n      // an undefined value does not change the attribute.\n      if (attrValue === undefined) {\n        return;\n      }\n      // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue as string);\n      }\n      // mark state not reflecting\n      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n    }\n  }\n\n  private _attributeToProperty(name: string, value: string|null) {\n    // Use tracking info to avoid deserializing attribute value if it was\n    // just set from a property setter.\n    if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n      return;\n    }\n    const ctor = (this.constructor as typeof UpdatingElement);\n    // Note, hint this as an `AttributeMap` so closure clearly understands\n    // the type; it has issues with tracking types through statics\n    // tslint:disable-next-line:no-unnecessary-type-assertion\n    const propName = (ctor._attributeToPropertyMap as AttributeMap).get(name);\n    if (propName !== undefined) {\n      const options = ctor.getPropertyOptions(propName);\n      // mark state reflecting\n      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n      this[propName as keyof this] =\n          // tslint:disable-next-line:no-any\n          ctor._propertyValueFromAttribute(value, options) as any;\n      // mark state not reflecting\n      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n    }\n  }\n\n  /**\n   * This protected version of `requestUpdate` does not access or return the\n   * `updateComplete` promise. This promise can be overridden and is therefore\n   * not free to access.\n   */\n  protected requestUpdateInternal(\n      name?: PropertyKey, oldValue?: unknown, options?: PropertyDeclaration) {\n    let shouldRequestUpdate = true;\n    // If we have a property key, perform property update steps.\n    if (name !== undefined) {\n      const ctor = this.constructor as typeof UpdatingElement;\n      options = options || ctor.getPropertyOptions(name);\n      if (ctor._valueHasChanged(\n              this[name as keyof this], oldValue, options.hasChanged)) {\n        if (!this._changedProperties.has(name)) {\n          this._changedProperties.set(name, oldValue);\n        }\n        // Add to reflecting properties set.\n        // Note, it's important that every change has a chance to add the\n        // property to `_reflectingProperties`. This ensures setting\n        // attribute + property reflects correctly.\n        if (options.reflect === true &&\n            !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n          if (this._reflectingProperties === undefined) {\n            this._reflectingProperties = new Map();\n          }\n          this._reflectingProperties.set(name, options);\n        }\n      } else {\n        // Abort the request if the property should not be considered changed.\n        shouldRequestUpdate = false;\n      }\n    }\n    if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n      this._updatePromise = this._enqueueUpdate();\n    }\n  }\n\n  /**\n   * Requests an update which is processed asynchronously. This should\n   * be called when an element should update based on some state not triggered\n   * by setting a property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored. Returns the `updateComplete` Promise which is resolved\n   * when the update completes.\n   *\n   * @param name {PropertyKey} (optional) name of requesting property\n   * @param oldValue {any} (optional) old value of requesting property\n   * @returns {Promise} A Promise that is resolved when the update completes.\n   */\n  requestUpdate(name?: PropertyKey, oldValue?: unknown) {\n    this.requestUpdateInternal(name, oldValue);\n    return this.updateComplete;\n  }\n\n  /**\n   * Sets up the element to asynchronously update.\n   */\n  private async _enqueueUpdate() {\n    this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await this._updatePromise;\n    } catch (e) {\n      // Ignore any previous errors. We only care that the previous cycle is\n      // done. Any error should have been handled in the previous update.\n    }\n    const result = this.performUpdate();\n    // If `performUpdate` returns a Promise, we await it. This is done to\n    // enable coordinating updates with a scheduler. Note, the result is\n    // checked to avoid delaying an additional microtask unless we need to.\n    if (result != null) {\n      await result;\n    }\n    return !this._hasRequestedUpdate;\n  }\n\n  private get _hasRequestedUpdate() {\n    return (this._updateState & STATE_UPDATE_REQUESTED);\n  }\n\n  protected get hasUpdated() {\n    return (this._updateState & STATE_HAS_UPDATED);\n  }\n\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * You can override this method to change the timing of updates. If this\n   * method is overridden, `super.performUpdate()` must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```\n   * protected async performUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.performUpdate();\n   * }\n   * ```\n   */\n  protected performUpdate(): void|Promise<unknown> {\n    // Abort any update if one is not pending when this is called.\n    // This can happen if `performUpdate` is called early to \"flush\"\n    // the update.\n    if (!this._hasRequestedUpdate) {\n      return;\n    }\n    // Mixin instance properties once, if they exist.\n    if (this._instanceProperties) {\n      this._applyInstanceProperties();\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.update(changedProperties);\n      } else {\n        this._markUpdated();\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false;\n      // Ensure element can accept additional updates after an exception.\n      this._markUpdated();\n      throw e;\n    }\n    if (shouldUpdate) {\n      if (!(this._updateState & STATE_HAS_UPDATED)) {\n        this._updateState = this._updateState | STATE_HAS_UPDATED;\n        this.firstUpdated(changedProperties);\n      }\n      this.updated(changedProperties);\n    }\n  }\n\n  private _markUpdated() {\n    this._changedProperties = new Map();\n    this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n  }\n\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update.\n   *\n   * To await additional asynchronous work, override the `_getUpdateComplete`\n   * method. For example, it is sometimes useful to await a rendered element\n   * before fulfilling this Promise. To do this, first await\n   * `super._getUpdateComplete()`, then any subsequent state.\n   *\n   * @returns {Promise} The Promise returns a boolean that indicates if the\n   * update resolved without triggering another update.\n   */\n  get updateComplete() {\n    return this._getUpdateComplete();\n  }\n\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   *   class MyElement extends LitElement {\n   *     async _getUpdateComplete() {\n   *       await super._getUpdateComplete();\n   *       await this._myChild.updateComplete;\n   *     }\n   *   }\n   * @deprecated Override `getUpdateComplete()` instead for forward\n   *     compatibility with `lit-element` 3.0 / `@lit/reactive-element`.\n   */\n  protected _getUpdateComplete() {\n    return this.getUpdateComplete();\n  }\n\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   *   class MyElement extends LitElement {\n   *     async getUpdateComplete() {\n   *       await super.getUpdateComplete();\n   *       await this._myChild.updateComplete;\n   *     }\n   *   }\n   */\n  protected getUpdateComplete() {\n    return this._updatePromise;\n  }\n\n  /**\n   * Controls whether or not `update` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected shouldUpdate(_changedProperties: PropertyValues): boolean {\n    return true;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(_changedProperties: PropertyValues) {\n    if (this._reflectingProperties !== undefined &&\n        this._reflectingProperties.size > 0) {\n      // Use forEach so this works even if for/of loops are compiled to for\n      // loops expecting arrays\n      this._reflectingProperties.forEach(\n          (v, k) => this._propertyToAttribute(k, this[k as keyof this], v));\n      this._reflectingProperties = undefined;\n    }\n    this._markUpdated();\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected updated(_changedProperties: PropertyValues) {\n  }\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected firstUpdated(_changedProperties: PropertyValues) {\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * The main LitElement module, which defines the [[`LitElement`]] base class and\n * related APIs.\n *\n *  LitElement components can define a template and a set of observed\n * properties. Changing an observed property triggers a re-render of the\n * element.\n *\n *  Import [[`LitElement`]] and [[`html`]] from this module to create a\n * component:\n *\n *  ```js\n * import {LitElement, html} from 'lit-element';\n *\n * class MyElement extends LitElement {\n *\n *   // Declare observed properties\n *   static get properties() {\n *     return {\n *       adjective: {}\n *     }\n *   }\n *\n *   constructor() {\n *     this.adjective = 'awesome';\n *   }\n *\n *   // Define the element's template\n *   render() {\n *     return html`<p>your ${adjective} template here</p>`;\n *   }\n * }\n *\n * customElements.define('my-element', MyElement);\n * ```\n *\n * `LitElement` extends [[`UpdatingElement`]] and adds lit-html templating.\n * The `UpdatingElement` class is provided for users that want to build\n * their own custom element base classes that don't use lit-html.\n *\n * @packageDocumentation\n */\nimport {render, ShadyRenderOptions} from 'lit-html/lib/shady-render.js';\n\nimport {PropertyValues, UpdatingElement} from './lib/updating-element.js';\n\nexport * from './lib/updating-element.js';\nexport {UpdatingElement as ReactiveElement} from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport {html, svg, TemplateResult, SVGTemplateResult} from 'lit-html/lit-html.js';\nimport {supportsAdoptingStyleSheets, CSSResult, unsafeCSS} from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n\ndeclare global {\n  interface Window {\n    litElementVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.5.1');\n\nexport type CSSResultOrNative = CSSResult|CSSStyleSheet;\n\nexport interface CSSResultArray extends\n    Array<CSSResultOrNative|CSSResultArray> {}\n\nexport type CSSResultGroup = CSSResultOrNative|CSSResultArray;\n\n/**\n * Sentinal value used to avoid calling lit-html's render function when\n * subclasses do not implement `render`\n */\nconst renderNotImplemented = {};\n\n/**\n * Base element class that manages element properties and attributes, and\n * renders a lit-html template.\n *\n * To define a component, subclass `LitElement` and implement a\n * `render` method to provide the component's template. Define properties\n * using the [[`properties`]] property or the [[`property`]] decorator.\n */\nexport class LitElement extends UpdatingElement {\n  /**\n   * Ensure this class is marked as `finalized` as an optimization ensuring\n   * it will not needlessly try to `finalize`.\n   *\n   * Note this property name is a string to prevent breaking Closure JS Compiler\n   * optimizations. See updating-element.ts for more information.\n   */\n  protected static['finalized'] = true;\n\n  /**\n   * Reference to the underlying library method used to render the element's\n   * DOM. By default, points to the `render` method from lit-html's shady-render\n   * module.\n   *\n   * **Most users will never need to touch this property.**\n   *\n   * This  property should not be confused with the `render` instance method,\n   * which should be overridden to define a template for the element.\n   *\n   * Advanced users creating a new base class based on LitElement can override\n   * this property to point to a custom render method with a signature that\n   * matches [shady-render's `render`\n   * method](https://lit-html.polymer-project.org/api/modules/shady_render.html#render).\n   *\n   * @nocollapse\n   */\n  static render:\n      (result: unknown, container: Element|DocumentFragment,\n       options: ShadyRenderOptions) => void = render;\n\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the [[`css`]] tag function or via constructible stylesheets.\n   */\n  static styles?: CSSResultGroup;\n\n  /** @nocollapse */\n  static shadowRootOptions: ShadowRootInit = {mode: 'open'};\n\n  private static _styles: Array<CSSResultOrNative|CSSResult>|undefined;\n\n  /**\n   * Return the array of styles to apply to the element.\n   * Override this method to integrate into a style management system.\n   *\n   * @nocollapse\n   */\n  static getStyles(): CSSResultGroup|undefined {\n    return this.styles;\n  }\n\n  /** @nocollapse */\n  private static _getUniqueStyles() {\n    // Only gather styles once per class\n    if (this.hasOwnProperty(JSCompiler_renameProperty('_styles', this))) {\n      return;\n    }\n    // Take care not to call `this.getStyles()` multiple times since this\n    // generates new CSSResults each time.\n    // TODO(sorvell): Since we do not cache CSSResults by input, any\n    // shared styles will generate new stylesheet objects, which is wasteful.\n    // This should be addressed when a browser ships constructable\n    // stylesheets.\n    const userStyles = this.getStyles();\n\n    if (Array.isArray(userStyles)) {\n      // De-duplicate styles preserving the _last_ instance in the set.\n      // This is a performance optimization to avoid duplicated styles that can\n      // occur especially when composing via subclassing.\n      // The last item is kept to try to preserve the cascade order with the\n      // assumption that it's most important that last added styles override\n      // previous styles.\n      const addStyles = (styles: CSSResultArray, set: Set<CSSResultOrNative>):\n          Set<CSSResultOrNative> => styles.reduceRight(\n              (set: Set<CSSResultOrNative>, s) =>\n                  // Note: On IE set.add() does not return the set\n              Array.isArray(s) ? addStyles(s, set) : (set.add(s), set),\n              set);\n      // Array.from does not work on Set in IE, otherwise return\n      // Array.from(addStyles(userStyles, new Set<CSSResult>())).reverse()\n      const set = addStyles(userStyles, new Set<CSSResultOrNative>());\n      const styles: CSSResultOrNative[] = [];\n      set.forEach((v) => styles.unshift(v));\n      this._styles = styles;\n    } else {\n      this._styles = userStyles === undefined ? [] : [userStyles];\n    }\n\n    // Ensure that there are no invalid CSSStyleSheet instances here. They are\n    // invalid in two conditions.\n    // (1) the sheet is non-constructible (`sheet` of a HTMLStyleElement), but\n    //     this is impossible to check except via .replaceSync or use\n    // (2) the ShadyCSS polyfill is enabled (:. supportsAdoptingStyleSheets is\n    //     false)\n    this._styles = this._styles.map((s) => {\n      if (s instanceof CSSStyleSheet && !supportsAdoptingStyleSheets) {\n        // Flatten the cssText from the passed constructible stylesheet (or\n        // undetectable non-constructible stylesheet). The user might have\n        // expected to update their stylesheets over time, but the alternative\n        // is a crash.\n        const cssText = Array.prototype.slice.call(s.cssRules)\n                            .reduce((css, rule) => css + rule.cssText, '');\n        return unsafeCSS(cssText);\n      }\n      return s;\n    });\n  }\n\n  private _needsShimAdoptedStyleSheets?: boolean;\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   */\n  readonly renderRoot!: Element|DocumentFragment;\n\n  /**\n   * Performs element initialization. By default this calls\n   * [[`createRenderRoot`]] to create the element [[`renderRoot`]] node and\n   * captures any pre-set values for registered properties.\n   */\n  protected initialize() {\n    super.initialize();\n    (this.constructor as typeof LitElement)._getUniqueStyles();\n    (this as {\n      renderRoot: Element|DocumentFragment;\n    }).renderRoot = this.createRenderRoot();\n    // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n    // element's getRootNode(). While this could be done, we're choosing not to\n    // support this now since it would require different logic around de-duping.\n    if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n      this.adoptStyles();\n    }\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   * @returns {Element|DocumentFragment} Returns a node into which to render.\n   */\n  protected createRenderRoot(): Element|ShadowRoot {\n    return this.attachShadow(\n        (this.constructor as typeof LitElement).shadowRootOptions);\n  }\n\n  /**\n   * Applies styling to the element shadowRoot using the [[`styles`]]\n   * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n   * available and will fallback otherwise. When Shadow DOM is polyfilled,\n   * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n   * is available but `adoptedStyleSheets` is not, styles are appended to the\n   * end of the `shadowRoot` to [mimic spec\n   * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n   */\n  protected adoptStyles() {\n    const styles = (this.constructor as typeof LitElement)._styles!;\n    if (styles.length === 0) {\n      return;\n    }\n    // There are three separate cases here based on Shadow DOM support.\n    // (1) shadowRoot polyfilled: use ShadyCSS\n    // (2) shadowRoot.adoptedStyleSheets available: use it\n    // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n    // rendering\n    if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n      window.ShadyCSS.ScopingShim!.prepareAdoptedCssText(\n          styles.map((s) => (s as CSSResult).cssText), this.localName);\n    } else if (supportsAdoptingStyleSheets) {\n      (this.renderRoot as ShadowRoot).adoptedStyleSheets =\n          styles.map((s) => s instanceof CSSStyleSheet ? s : s.styleSheet!);\n    } else {\n      // This must be done after rendering so the actual style insertion is done\n      // in `update`.\n      this._needsShimAdoptedStyleSheets = true;\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    // Note, first update/render handles styleElement so we only call this if\n    // connected after first update.\n    if (this.hasUpdated && window.ShadyCSS !== undefined) {\n      window.ShadyCSS.styleElement(this);\n    }\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes\n   * and calls `render` to render DOM via lit-html. Setting properties inside\n   * this method will *not* trigger another update.\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(changedProperties: PropertyValues) {\n    // Setting properties in `render` should not trigger an update. Since\n    // updates are allowed after super.update, it's important to call `render`\n    // before that.\n    const templateResult = this.render();\n    super.update(changedProperties);\n    // If render is not implemented by the component, don't call lit-html render\n    if (templateResult !== renderNotImplemented) {\n      (this.constructor as typeof LitElement)\n          .render(\n              templateResult,\n              this.renderRoot,\n              {scopeName: this.localName, eventContext: this});\n    }\n    // When native Shadow DOM is used but adoptedStyles are not supported,\n    // insert styling after rendering to ensure adoptedStyles have highest\n    // priority.\n    if (this._needsShimAdoptedStyleSheets) {\n      this._needsShimAdoptedStyleSheets = false;\n      (this.constructor as typeof LitElement)._styles!.forEach((s) => {\n        const style = document.createElement('style');\n        style.textContent = (s as CSSResult).cssText;\n        this.renderRoot.appendChild(style);\n      });\n    }\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method may return\n   * any value renderable by lit-html's `NodePart` - typically a\n   * `TemplateResult`. Setting properties inside this method will *not* trigger\n   * the element to update.\n   */\n  protected render(): unknown {\n    return renderNotImplemented;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Part} from './part.js';\nimport {AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\n\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor implements TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: string[],\n      options: RenderOptions): ReadonlyArray<Part> {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const committer = new PropertyCommitter(element, name.slice(1), strings);\n      return committer.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const committer = new AttributeCommitter(element, name, strings);\n    return committer.parts;\n  }\n  /**\n   * Create parts for a text-position binding.\n   * @param templateFactory\n   */\n  handleTextExpression(options: RenderOptions) {\n    return new NodePart(options);\n  }\n}\n\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Part} from './part.js';\n\nconst directives = new WeakMap<object, true>();\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type DirectiveFactory = (...args: any[]) => object;\n\nexport type DirectiveFn = (part: Part) => void;\n\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = <F extends DirectiveFactory>(f: F): F =>\n    ((...args: unknown[]) => {\n      const d = f(...args);\n      directives.set(d, true);\n      return d;\n    }) as F;\n\nexport const isDirective = (o: unknown): o is DirectiveFn => {\n  return typeof o === 'function' && directives.has(o);\n};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\ninterface MaybePolyfilledCe extends CustomElementRegistry {\n  readonly polyfillWrapFlushCallback?: object;\n}\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = typeof window !== 'undefined' &&\n    window.customElements != null &&\n    (window.customElements as MaybePolyfilledCe).polyfillWrapFlushCallback !==\n        undefined;\n\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes =\n    (container: Node,\n     start: Node|null,\n     end: Node|null = null,\n     before: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.insertBefore(start!, before);\n        start = n;\n      }\n    };\n\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes =\n    (container: Node, start: Node|null, end: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.removeChild(start!);\n        start = n;\n      }\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(\n    template: Template, nodesToRemove: Set<Node>) {\n  const {element: {content}, parts} = template;\n  const walker =\n      document.createTreeWalker(content, walkerNodeFilter, null, false);\n  let partIndex = nextActiveIndexInTemplateParts(parts);\n  let part = parts[partIndex];\n  let nodeIndex = -1;\n  let removeCount = 0;\n  const nodesToRemoveInTemplate = [];\n  let currentRemovingNode: Node|null = null;\n  while (walker.nextNode()) {\n    nodeIndex++;\n    const node = walker.currentNode as Element;\n    // End removal if stepped past the removing node\n    if (node.previousSibling === currentRemovingNode) {\n      currentRemovingNode = null;\n    }\n    // A node to remove was found in the template\n    if (nodesToRemove.has(node)) {\n      nodesToRemoveInTemplate.push(node);\n      // Track node we're removing\n      if (currentRemovingNode === null) {\n        currentRemovingNode = node;\n      }\n    }\n    // When removing, increment count by which to adjust subsequent part indices\n    if (currentRemovingNode !== null) {\n      removeCount++;\n    }\n    while (part !== undefined && part.index === nodeIndex) {\n      // If part is in a removed node deactivate it by setting index to -1 or\n      // adjust the index as needed.\n      part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n      // go to the next active part.\n      partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n      part = parts[partIndex];\n    }\n  }\n  nodesToRemoveInTemplate.forEach((n) => n.parentNode!.removeChild(n));\n}\n\nconst countNodes = (node: Node) => {\n  let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n  const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n  while (walker.nextNode()) {\n    count++;\n  }\n  return count;\n};\n\nconst nextActiveIndexInTemplateParts =\n    (parts: TemplatePart[], startIndex = -1) => {\n      for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n          return i;\n        }\n      }\n      return -1;\n    };\n\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(\n    template: Template, node: Node, refNode: Node|null = null) {\n  const {element: {content}, parts} = template;\n  // If there's no refNode, then put node at end of template.\n  // No part indices need to be shifted in this case.\n  if (refNode === null || refNode === undefined) {\n    content.appendChild(node);\n    return;\n  }\n  const walker =\n      document.createTreeWalker(content, walkerNodeFilter, null, false);\n  let partIndex = nextActiveIndexInTemplateParts(parts);\n  let insertCount = 0;\n  let walkerIndex = -1;\n  while (walker.nextNode()) {\n    walkerIndex++;\n    const walkerNode = walker.currentNode as Element;\n    if (walkerNode === refNode) {\n      insertCount = countNodes(node);\n      refNode.parentNode!.insertBefore(node, refNode);\n    }\n    while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n      // If we've inserted the node, simply adjust all subsequent parts\n      if (insertCount > 0) {\n        while (partIndex !== -1) {\n          parts[partIndex].index += insertCount;\n          partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n        return;\n      }\n      partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n    }\n  }\n}\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * The Part interface represents a dynamic part of a template instance rendered\n * by lit-html.\n */\nexport interface Part {\n  readonly value: unknown;\n\n  /**\n   * Sets the current part value, but does not write it to the DOM.\n   * @param value The value that will be committed.\n   */\n  setValue(value: unknown): void;\n\n  /**\n   * Commits the current part value, causing it to actually be written to the\n   * DOM.\n   *\n   * Directives are run at the start of `commit`, so that if they call\n   * `part.setValue(...)` synchronously that value will be used in the current\n   * commit, and there's no need to call `part.commit()` within the directive.\n   * If directives set a part value asynchronously, then they must call\n   * `part.commit()` manually.\n   */\n  commit(): void;\n}\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isDirective} from './directive.js';\nimport {removeNodes} from './dom.js';\nimport {noChange, nothing, Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {createMarker} from './template.js';\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\nexport type Primitive = null|undefined|boolean|number|string|symbol|bigint;\nexport const isPrimitive = (value: unknown): value is Primitive => {\n  return (\n      value === null ||\n      !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value: unknown): value is Iterable<unknown> => {\n  return Array.isArray(value) ||\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      !!(value && (value as any)[Symbol.iterator]);\n};\n\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attribute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n  readonly parts: ReadonlyArray<AttributePart>;\n  dirty = true;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n    this.parts = [];\n    for (let i = 0; i < strings.length - 1; i++) {\n      (this.parts as AttributePart[])[i] = this._createPart();\n    }\n  }\n\n  /**\n   * Creates a single part. Override this to create a differnt type of part.\n   */\n  protected _createPart(): AttributePart {\n    return new AttributePart(this);\n  }\n\n  protected _getValue(): unknown {\n    const strings = this.strings;\n    const l = strings.length - 1;\n    const parts = this.parts;\n\n    // If we're assigning an attribute via syntax like:\n    //    attr=\"${foo}\"  or  attr=${foo}\n    // but not\n    //    attr=\"${foo} ${bar}\" or attr=\"${foo} baz\"\n    // then we don't want to coerce the attribute value into one long\n    // string. Instead we want to just return the value itself directly,\n    // so that sanitizeDOMValue can get the actual value rather than\n    // String(value)\n    // The exception is if v is an array, in which case we do want to smash\n    // it together into a string without calling String() on the array.\n    //\n    // This also allows trusted values (when using TrustedTypes) being\n    // assigned to DOM sinks without being stringified in the process.\n    if (l === 1 && strings[0] === '' && strings[1] === '') {\n      const v = parts[0].value;\n      if (typeof v === 'symbol') {\n        return String(v);\n      }\n      if (typeof v === 'string' || !isIterable(v)) {\n        return v;\n      }\n    }\n    let text = '';\n\n    for (let i = 0; i < l; i++) {\n      text += strings[i];\n      const part = parts[i];\n      if (part !== undefined) {\n        const v = part.value;\n        if (isPrimitive(v) || !isIterable(v)) {\n          text += typeof v === 'string' ? v : String(v);\n        } else {\n          for (const t of v) {\n            text += typeof t === 'string' ? t : String(t);\n          }\n        }\n      }\n    }\n\n    text += strings[l];\n    return text;\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      this.element.setAttribute(this.name, this._getValue() as string);\n    }\n  }\n}\n\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart implements Part {\n  readonly committer: AttributeCommitter;\n  value: unknown = undefined;\n\n  constructor(committer: AttributeCommitter) {\n    this.committer = committer;\n  }\n\n  setValue(value: unknown): void {\n    if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n      this.value = value;\n      // If the value is a not a directive, dirty the committer so that it'll\n      // call setAttribute. If the value is a directive, it'll dirty the\n      // committer if it calls setValue().\n      if (!isDirective(value)) {\n        this.committer.dirty = true;\n      }\n    }\n  }\n\n  commit() {\n    while (isDirective(this.value)) {\n      const directive = this.value;\n      this.value = noChange;\n      directive(this);\n    }\n    if (this.value === noChange) {\n      return;\n    }\n    this.committer.commit();\n  }\n}\n\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart implements Part {\n  readonly options: RenderOptions;\n  startNode!: Node;\n  endNode!: Node;\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(options: RenderOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Appends this part into a container.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendInto(container: Node) {\n    this.startNode = container.appendChild(createMarker());\n    this.endNode = container.appendChild(createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n   * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n   * such as those that appear in a literal section of a template.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterNode(ref: Node) {\n    this.startNode = ref;\n    this.endNode = ref.nextSibling!;\n  }\n\n  /**\n   * Appends this part into a parent part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendIntoPart(part: NodePart) {\n    part.__insert(this.startNode = createMarker());\n    part.__insert(this.endNode = createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterPart(ref: NodePart) {\n    ref.__insert(this.startNode = createMarker());\n    this.endNode = ref.endNode;\n    ref.endNode = this.startNode;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    if (this.startNode.parentNode === null) {\n      return;\n    }\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    const value = this.__pendingValue;\n    if (value === noChange) {\n      return;\n    }\n    if (isPrimitive(value)) {\n      if (value !== this.value) {\n        this.__commitText(value);\n      }\n    } else if (value instanceof TemplateResult) {\n      this.__commitTemplateResult(value);\n    } else if (value instanceof Node) {\n      this.__commitNode(value);\n    } else if (isIterable(value)) {\n      this.__commitIterable(value);\n    } else if (value === nothing) {\n      this.value = nothing;\n      this.clear();\n    } else {\n      // Fallback, will render the string representation\n      this.__commitText(value);\n    }\n  }\n\n  private __insert(node: Node) {\n    this.endNode.parentNode!.insertBefore(node, this.endNode);\n  }\n\n  private __commitNode(value: Node): void {\n    if (this.value === value) {\n      return;\n    }\n    this.clear();\n    this.__insert(value);\n    this.value = value;\n  }\n\n  private __commitText(value: unknown): void {\n    const node = this.startNode.nextSibling!;\n    value = value == null ? '' : value;\n    // If `value` isn't already a string, we explicitly convert it here in case\n    // it can't be implicitly converted - i.e. it's a symbol.\n    const valueAsString: string =\n        typeof value === 'string' ? value : String(value);\n    if (node === this.endNode.previousSibling &&\n        node.nodeType === 3 /* Node.TEXT_NODE */) {\n      // If we only have a single text node between the markers, we can just\n      // set its value, rather than replacing it.\n      // TODO(justinfagnani): Can we just check if this.value is primitive?\n      (node as Text).data = valueAsString;\n    } else {\n      this.__commitNode(document.createTextNode(valueAsString));\n    }\n    this.value = value;\n  }\n\n  private __commitTemplateResult(value: TemplateResult): void {\n    const template = this.options.templateFactory(value);\n    if (this.value instanceof TemplateInstance &&\n        this.value.template === template) {\n      this.value.update(value.values);\n    } else {\n      // Make sure we propagate the template processor from the TemplateResult\n      // so that we use its syntax extension, etc. The template factory comes\n      // from the render function options so that it can control template\n      // caching and preprocessing.\n      const instance =\n          new TemplateInstance(template, value.processor, this.options);\n      const fragment = instance._clone();\n      instance.update(value.values);\n      this.__commitNode(fragment);\n      this.value = instance;\n    }\n  }\n\n  private __commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If _value is an array, then the previous render was of an\n    // iterable and _value will contain the NodeParts from the previous\n    // render. If _value is not an array, clear this part and make a new\n    // array for NodeParts.\n    if (!Array.isArray(this.value)) {\n      this.value = [];\n      this.clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this.value as NodePart[];\n    let partIndex = 0;\n    let itemPart: NodePart|undefined;\n\n    for (const item of value) {\n      // Try to reuse an existing part\n      itemPart = itemParts[partIndex];\n\n      // If no existing part, create a new one\n      if (itemPart === undefined) {\n        itemPart = new NodePart(this.options);\n        itemParts.push(itemPart);\n        if (partIndex === 0) {\n          itemPart.appendIntoPart(this);\n        } else {\n          itemPart.insertAfterPart(itemParts[partIndex - 1]);\n        }\n      }\n      itemPart.setValue(item);\n      itemPart.commit();\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n      this.clear(itemPart && itemPart.endNode);\n    }\n  }\n\n  clear(startNode: Node = this.startNode) {\n    removeNodes(\n        this.startNode.parentNode!, startNode.nextSibling!, this.endNode);\n  }\n}\n\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart implements Part {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: readonly string[];\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(element: Element, name: string, strings: readonly string[]) {\n    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n      throw new Error(\n          'Boolean attributes can only contain a single expression');\n    }\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n    const value = !!this.__pendingValue;\n    if (this.value !== value) {\n      if (value) {\n        this.element.setAttribute(this.name, '');\n      } else {\n        this.element.removeAttribute(this.name);\n      }\n      this.value = value;\n    }\n    this.__pendingValue = noChange;\n  }\n}\n\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n  readonly single: boolean;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    super(element, name, strings);\n    this.single =\n        (strings.length === 2 && strings[0] === '' && strings[1] === '');\n  }\n\n  protected _createPart(): PropertyPart {\n    return new PropertyPart(this);\n  }\n\n  protected _getValue() {\n    if (this.single) {\n      return this.parts[0].value;\n    }\n    return super._getValue();\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this.element as any)[this.name] = this._getValue();\n    }\n  }\n}\n\nexport class PropertyPart extends AttributePart {}\n\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the third\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n\n// Wrap into an IIFE because MS Edge <= v41 does not support having try/catch\n// blocks right into the body of a module\n(() => {\n  try {\n    const options = {\n      get capture() {\n        eventOptionsSupported = true;\n        return false;\n      }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    window.addEventListener('test', options as any, options);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    window.removeEventListener('test', options as any, options);\n  } catch (_e) {\n    // event options not supported\n  }\n})();\n\ntype EventHandlerWithOptions =\n    EventListenerOrEventListenerObject&Partial<AddEventListenerOptions>;\nexport class EventPart implements Part {\n  readonly element: Element;\n  readonly eventName: string;\n  readonly eventContext?: EventTarget;\n  value: undefined|EventHandlerWithOptions = undefined;\n  private __options?: AddEventListenerOptions;\n  private __pendingValue: undefined|EventHandlerWithOptions = undefined;\n  private readonly __boundHandleEvent: (event: Event) => void;\n\n  constructor(element: Element, eventName: string, eventContext?: EventTarget) {\n    this.element = element;\n    this.eventName = eventName;\n    this.eventContext = eventContext;\n    this.__boundHandleEvent = (e) => this.handleEvent(e);\n  }\n\n  setValue(value: undefined|EventHandlerWithOptions): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange as EventHandlerWithOptions;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n\n    const newListener = this.__pendingValue;\n    const oldListener = this.value;\n    const shouldRemoveListener = newListener == null ||\n        oldListener != null &&\n            (newListener.capture !== oldListener.capture ||\n             newListener.once !== oldListener.once ||\n             newListener.passive !== oldListener.passive);\n    const shouldAddListener =\n        newListener != null && (oldListener == null || shouldRemoveListener);\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    if (shouldAddListener) {\n      this.__options = getOptions(newListener);\n      this.element.addEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    this.value = newListener;\n    this.__pendingValue = noChange as EventHandlerWithOptions;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this.value === 'function') {\n      this.value.call(this.eventContext || this.element, event);\n    } else {\n      (this.value as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o: AddEventListenerOptions|undefined) => o &&\n    (eventOptionsSupported ?\n         {capture: o.capture, passive: o.passive, once: o.once} :\n         o.capture as AddEventListenerOptions);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {removeNodes} from './dom.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {templateFactory} from './template-factory.js';\n\nexport const parts = new WeakMap<Node, NodePart>();\n\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render =\n    (result: unknown,\n     container: Element|DocumentFragment,\n     options?: Partial<RenderOptions>) => {\n      let part = parts.get(container);\n      if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart({\n                               templateFactory,\n                               ...options,\n                             }));\n        part.appendInto(container);\n      }\n      part.setValue(result);\n      part.commit();\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @packageDocumentation\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {removeNodes} from './dom.js';\nimport {insertNodeIntoTemplate, removeNodesFromTemplate} from './modify-template.js';\nimport {RenderOptions} from './render-options.js';\nimport {parts, render as litRender} from './render.js';\nimport {templateCaches} from './template-factory.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\nexport {html, svg, TemplateResult} from '../lit-html.js';\n\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type: string, scopeName: string) =>\n    `${type}--${scopeName}`;\n\nlet compatibleShadyCSSVersion = true;\n\nif (typeof window.ShadyCSS === 'undefined') {\n  compatibleShadyCSSVersion = false;\n} else if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n  console.warn(\n      `Incompatible ShadyCSS version detected. ` +\n      `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n      `@webcomponents/shadycss@1.3.1.`);\n  compatibleShadyCSSVersion = false;\n}\n\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nexport const shadyTemplateFactory = (scopeName: string) =>\n    (result: TemplateResult) => {\n      const cacheKey = getTemplateCacheKey(result.type, scopeName);\n      let templateCache = templateCaches.get(cacheKey);\n      if (templateCache === undefined) {\n        templateCache = {\n          stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n          keyString: new Map<string, Template>()\n        };\n        templateCaches.set(cacheKey, templateCache);\n      }\n\n      let template = templateCache.stringsArray.get(result.strings);\n      if (template !== undefined) {\n        return template;\n      }\n\n      const key = result.strings.join(marker);\n      template = templateCache.keyString.get(key);\n      if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n          window.ShadyCSS!.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n      }\n      templateCache.stringsArray.set(result.strings, template);\n      return template;\n    };\n\nconst TEMPLATE_TYPES = ['html', 'svg'];\n\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName: string) => {\n  TEMPLATE_TYPES.forEach((type) => {\n    const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n    if (templates !== undefined) {\n      templates.keyString.forEach((template) => {\n        const {element: {content}} = template;\n        // IE 11 doesn't support the iterable param Set constructor\n        const styles = new Set<Element>();\n        Array.from(content.querySelectorAll('style')).forEach((s: Element) => {\n          styles.add(s);\n        });\n        removeNodesFromTemplate(template, styles);\n      });\n    }\n  });\n};\n\nconst shadyRenderSet = new Set<string>();\n\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles =\n    (scopeName: string, renderedDOM: DocumentFragment, template?: Template) => {\n      shadyRenderSet.add(scopeName);\n      // If `renderedDOM` is stamped from a Template, then we need to edit that\n      // Template's underlying template element. Otherwise, we create one here\n      // to give to ShadyCSS, which still requires one while scoping.\n      const templateElement =\n          !!template ? template.element : document.createElement('template');\n      // Move styles out of rendered DOM and store.\n      const styles = renderedDOM.querySelectorAll('style');\n      const {length} = styles;\n      // If there are no styles, skip unnecessary work\n      if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS!.prepareTemplateStyles(templateElement, scopeName);\n        return;\n      }\n      const condensedStyle = document.createElement('style');\n      // Collect styles into a single style. This helps us make sure ShadyCSS\n      // manipulations will not prevent us from being able to fix up template\n      // part indices.\n      // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n      // currently does this anyway. When it does not, this should be changed.\n      for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode!.removeChild(style);\n        condensedStyle.textContent! += style.textContent;\n      }\n      // Remove styles from nested templates in this scope.\n      removeStylesFromLitTemplates(scopeName);\n      // And then put the condensed style into the \"root\" template passed in as\n      // `template`.\n      const content = templateElement.content;\n      if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n      } else {\n        content.insertBefore(condensedStyle, content.firstChild);\n      }\n      // Note, it's important that ShadyCSS gets the template that `lit-html`\n      // will actually render so that it can update the style inside when\n      // needed (e.g. @apply native Shadow DOM case).\n      window.ShadyCSS!.prepareTemplateStyles(templateElement, scopeName);\n      const style = content.querySelector('style');\n      if (window.ShadyCSS!.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n      } else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set<Node>();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n      }\n    };\n\nexport interface ShadyRenderOptions extends Partial<RenderOptions> {\n  scopeName: string;\n}\n\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render =\n    (result: unknown,\n     container: Element|DocumentFragment|ShadowRoot,\n     options: ShadyRenderOptions) => {\n      if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n      }\n      const scopeName = options.scopeName;\n      const hasRendered = parts.has(container);\n      const needsScoping = compatibleShadyCSSVersion &&\n          container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n          !!(container as ShadowRoot).host;\n      // Handle first render to a scope specially...\n      const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n      // On first scope render, render into a fragment; this cannot be a single\n      // fragment that is reused since nested renders can occur synchronously.\n      const renderContainer =\n          firstScopeRender ? document.createDocumentFragment() : container;\n      litRender(\n          result,\n          renderContainer,\n          {templateFactory: shadyTemplateFactory(scopeName), ...options} as\n              RenderOptions);\n      // When performing first scope render,\n      // (1) We've rendered into a fragment so that there's a chance to\n      // `prepareTemplateStyles` before sub-elements hit the DOM\n      // (which might cause them to render based on a common pattern of\n      // rendering in a custom element's `connectedCallback`);\n      // (2) Scope the template with ShadyCSS one time only for this scope.\n      // (3) Render the fragment into the container and make sure the\n      // container knows its `part` is the one we just rendered. This ensures\n      // DOM will be re-used on subsequent renders.\n      if (firstScopeRender) {\n        const part = parts.get(renderContainer)!;\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(\n            scopeName, renderContainer as DocumentFragment, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n      }\n      // After elements have hit the DOM, update styling if this is the\n      // initial render to this container.\n      // This is needed whenever dynamic changes are made so it would be\n      // safest to do every render; however, this would regress performance\n      // so we leave it up to the user to call `ShadyCSS.styleElement`\n      // for dynamic changes.\n      if (!hasRendered && needsScoping) {\n        window.ShadyCSS!.styleElement((container as ShadowRoot).host);\n      }\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\n/**\n * A function type that creates a Template from a TemplateResult.\n *\n * This is a hook into the template-creation process for rendering that\n * requires some modification of templates before they're used, like ShadyCSS,\n * which must add classes to elements and remove styles.\n *\n * Templates should be cached as aggressively as possible, so that many\n * TemplateResults produced from the same expression only do the work of\n * creating the Template the first time.\n *\n * Templates are usually cached by TemplateResult.strings and\n * TemplateResult.type, but may be cached by other keys if this function\n * modifies the template.\n *\n * Note that currently TemplateFactories must not add, remove, or reorder\n * expressions, because there is no way to describe such a modification\n * to render() so that values are interpolated to the correct place in the\n * template instances.\n */\nexport type TemplateFactory = (result: TemplateResult) => Template;\n\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result: TemplateResult) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n      keyString: new Map<string, Template>()\n    };\n    templateCaches.set(result.type, templateCache);\n  }\n\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n\n  // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n  const key = result.strings.join(marker);\n\n  // Check if we already have a Template for this key\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement());\n    // Cache the Template for this key\n    templateCache.keyString.set(key, template);\n  }\n\n  // Cache all future queries for this TemplateStringsArray\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\n\n/**\n * The first argument to JS template tags retain identity across multiple\n * calls to a tag for the same literal, so we can cache work done per literal\n * in a Map.\n *\n * Safari currently has a bug which occasionally breaks this behavior, so we\n * need to cache the Template at two levels. We first cache the\n * TemplateStringsArray, and if that fails, we cache a key constructed by\n * joining the strings array.\n */\nexport interface TemplateCache {\n  readonly stringsArray: WeakMap<TemplateStringsArray, Template>;\n  readonly keyString: Map<string, Template>;\n}\n\nexport const templateCaches = new Map<string, TemplateCache>();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isCEPolyfill} from './dom.js';\nimport {Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n  private readonly __parts: Array<Part|undefined> = [];\n  readonly processor: TemplateProcessor;\n  readonly options: RenderOptions;\n  readonly template: Template;\n\n  constructor(\n      template: Template, processor: TemplateProcessor,\n      options: RenderOptions) {\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n\n  update(values: readonly unknown[]) {\n    let i = 0;\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.setValue(values[i]);\n      }\n      i++;\n    }\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.commit();\n      }\n    }\n  }\n\n  _clone(): DocumentFragment {\n    // There are a number of steps in the lifecycle of a template instance's\n    // DOM fragment:\n    //  1. Clone - create the instance fragment\n    //  2. Adopt - adopt into the main document\n    //  3. Process - find part markers and create parts\n    //  4. Upgrade - upgrade custom elements\n    //  5. Update - set node, attribute, property, etc., values\n    //  6. Connect - connect to the document. Optional and outside of this\n    //     method.\n    //\n    // We have a few constraints on the ordering of these steps:\n    //  * We need to upgrade before updating, so that property values will pass\n    //    through any property setters.\n    //  * We would like to process before upgrading so that we're sure that the\n    //    cloned fragment is inert and not disturbed by self-modifying DOM.\n    //  * We want custom elements to upgrade even in disconnected fragments.\n    //\n    // Given these constraints, with full custom elements support we would\n    // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n    //\n    // But Safari does not implement CustomElementRegistry#upgrade, so we\n    // can not implement that order and still have upgrade-before-update and\n    // upgrade disconnected fragments. So we instead sacrifice the\n    // process-before-upgrade constraint, since in Custom Elements v1 elements\n    // must not modify their light DOM in the constructor. We still have issues\n    // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n    // that don't strictly adhere to the no-modification rule because shadow\n    // DOM, which may be created in the constructor, is emulated by being placed\n    // in the light DOM.\n    //\n    // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n    // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n    // in one step.\n    //\n    // The Custom Elements v1 polyfill supports upgrade(), so the order when\n    // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n    // Connect.\n\n    const fragment = isCEPolyfill ?\n        this.template.element.content.cloneNode(true) as DocumentFragment :\n        document.importNode(this.template.element.content, true);\n\n    const stack: Node[] = [];\n    const parts = this.template.parts;\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        fragment,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    let partIndex = 0;\n    let nodeIndex = 0;\n    let part: TemplatePart;\n    let node = walker.nextNode();\n    // Loop through all the nodes and parts of a template\n    while (partIndex < parts.length) {\n      part = parts[partIndex];\n      if (!isTemplatePartActive(part)) {\n        this.__parts.push(undefined);\n        partIndex++;\n        continue;\n      }\n\n      // Progress the tree walker until we find our next part's node.\n      // Note that multiple parts may share the same node (attribute parts\n      // on a single element), so this loop may not run at all.\n      while (nodeIndex < part.index) {\n        nodeIndex++;\n        if (node!.nodeName === 'TEMPLATE') {\n          stack.push(node!);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n        if ((node = walker.nextNode()) === null) {\n          // We've exhausted the content inside a nested template element.\n          // Because we still have parts (the outer for-loop), we know:\n          // - There is a template in the stack\n          // - The walker will find a nextNode outside the template\n          walker.currentNode = stack.pop()!;\n          node = walker.nextNode();\n        }\n      }\n\n      // We've arrived at our part's node.\n      if (part.type === 'node') {\n        const part = this.processor.handleTextExpression(this.options);\n        part.insertAfterNode(node!.previousSibling!);\n        this.__parts.push(part);\n      } else {\n        this.__parts.push(...this.processor.handleAttributeExpressions(\n            node as Element, part.name, part.strings, this.options));\n      }\n      partIndex++;\n    }\n\n    if (isCEPolyfill) {\n      document.adoptNode(fragment);\n      customElements.upgrade(fragment);\n    }\n    return fragment;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {reparentNodes} from './dom.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker} from './template.js';\n\ndeclare const trustedTypes: typeof window.trustedTypes;\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = window.trustedTypes &&\n    trustedTypes!.createPolicy('lit-html', {createHTML: (s) => s});\n\nconst commentMarker = ` ${marker} `;\n\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  readonly strings: TemplateStringsArray;\n  readonly values: readonly unknown[];\n  readonly type: string;\n  readonly processor: TemplateProcessor;\n\n  constructor(\n      strings: TemplateStringsArray, values: readonly unknown[], type: string,\n      processor: TemplateProcessor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n  getHTML(): string {\n    const l = this.strings.length - 1;\n    let html = '';\n    let isCommentBinding = false;\n\n    for (let i = 0; i < l; i++) {\n      const s = this.strings[i];\n      // For each binding we want to determine the kind of marker to insert\n      // into the template source before it's parsed by the browser's HTML\n      // parser. The marker type is based on whether the expression is in an\n      // attribute, text, or comment position.\n      //   * For node-position bindings we insert a comment with the marker\n      //     sentinel as its text content, like <!--{{lit-guid}}-->.\n      //   * For attribute bindings we insert just the marker sentinel for the\n      //     first binding, so that we support unquoted attribute bindings.\n      //     Subsequent bindings can use a comment marker because multi-binding\n      //     attributes must be quoted.\n      //   * For comment bindings we insert just the marker sentinel so we don't\n      //     close the comment.\n      //\n      // The following code scans the template source, but is *not* an HTML\n      // parser. We don't need to track the tree structure of the HTML, only\n      // whether a binding is inside a comment, and if not, if it appears to be\n      // the first binding in an attribute.\n      const commentOpen = s.lastIndexOf('<!--');\n      // We're in comment position if we have a comment open with no following\n      // comment close. Because <-- can appear in an attribute value there can\n      // be false positives.\n      isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n          s.indexOf('-->', commentOpen + 1) === -1;\n      // Check to see if we have an attribute-like sequence preceding the\n      // expression. This can match \"name=value\" like structures in text,\n      // comments, and attribute values, so there can be false-positives.\n      const attributeMatch = lastAttributeNameRegex.exec(s);\n      if (attributeMatch === null) {\n        // We're only in this branch if we don't have a attribute-like\n        // preceding sequence. For comments, this guards against unusual\n        // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n        // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n        // below.\n        html += s + (isCommentBinding ? commentMarker : nodeMarker);\n      } else {\n        // For attributes we use just a marker sentinel, and also append a\n        // $lit$ suffix to the name to opt-out of attribute-specific parsing\n        // that IE and Edge do for style and certain SVG attributes.\n        html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n            attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n            marker;\n      }\n    }\n    html += this.strings[l];\n    return html;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement('template');\n    let value = this.getHTML();\n    if (policy !== undefined) {\n      // this is secure because `this.strings` is a TemplateStringsArray.\n      // TODO: validate this when\n      // https://github.com/tc39/proposal-array-is-template-object is\n      // implemented.\n      value = policy.createHTML(value) as unknown as string;\n    }\n    template.innerHTML = value;\n    return template;\n  }\n}\n\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  readonly parts: TemplatePart[] = [];\n  readonly element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n\n    const nodesToRemove: Node[] = [];\n    const stack: Node[] = [];\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        element.content,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    // Keeps track of the last index associated with a part. We try to delete\n    // unnecessary nodes, but we never want to associate two different parts\n    // to the same index. They must have a constant node between.\n    let lastPartIndex = 0;\n    let index = -1;\n    let partIndex = 0;\n    const {strings, values: {length}} = result;\n    while (partIndex < length) {\n      const node = walker.nextNode() as Element | Comment | Text | null;\n      if (node === null) {\n        // We've exhausted the content inside a nested template element.\n        // Because we still have parts (the outer for-loop), we know:\n        // - There is a template in the stack\n        // - The walker will find a nextNode outside the template\n        walker.currentNode = stack.pop()!;\n        continue;\n      }\n      index++;\n\n      if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n        if ((node as Element).hasAttributes()) {\n          const attributes = (node as Element).attributes;\n          const {length} = attributes;\n          // Per\n          // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n          // attributes are not guaranteed to be returned in document order.\n          // In particular, Edge/IE can return them out of order, so we cannot\n          // assume a correspondence between part index and attribute index.\n          let count = 0;\n          for (let i = 0; i < length; i++) {\n            if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n              count++;\n            }\n          }\n          while (count-- > 0) {\n            // Get the template literal section leading up to the first\n            // expression in this attribute\n            const stringForPart = strings[partIndex];\n            // Find the attribute name\n            const name = lastAttributeNameRegex.exec(stringForPart)![2];\n            // Find the corresponding attribute\n            // All bound attributes have had a suffix added in\n            // TemplateResult#getHTML to opt out of special attribute\n            // handling. To look up the attribute value we also need to add\n            // the suffix.\n            const attributeLookupName =\n                name.toLowerCase() + boundAttributeSuffix;\n            const attributeValue =\n                (node as Element).getAttribute(attributeLookupName)!;\n            (node as Element).removeAttribute(attributeLookupName);\n            const statics = attributeValue.split(markerRegex);\n            this.parts.push({type: 'attribute', index, name, strings: statics});\n            partIndex += statics.length - 1;\n          }\n        }\n        if ((node as Element).tagName === 'TEMPLATE') {\n          stack.push(node);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n      } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n        const data = (node as Text).data;\n        if (data.indexOf(marker) >= 0) {\n          const parent = node.parentNode!;\n          const strings = data.split(markerRegex);\n          const lastIndex = strings.length - 1;\n          // Generate a new text node for each literal section\n          // These nodes are also used as the markers for node parts\n          for (let i = 0; i < lastIndex; i++) {\n            let insert: Node;\n            let s = strings[i];\n            if (s === '') {\n              insert = createMarker();\n            } else {\n              const match = lastAttributeNameRegex.exec(s);\n              if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                s = s.slice(0, match.index) + match[1] +\n                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n              }\n              insert = document.createTextNode(s);\n            }\n            parent.insertBefore(insert, node);\n            this.parts.push({type: 'node', index: ++index});\n          }\n          // If there's no text, we must insert a comment to mark our place.\n          // Else, we can trust it will stick around after cloning.\n          if (strings[lastIndex] === '') {\n            parent.insertBefore(createMarker(), node);\n            nodesToRemove.push(node);\n          } else {\n            (node as Text).data = strings[lastIndex];\n          }\n          // We have a part for each match found\n          partIndex += lastIndex;\n        }\n      } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n        if ((node as Comment).data === marker) {\n          const parent = node.parentNode!;\n          // Add a new marker node to be the startNode of the Part if any of\n          // the following are true:\n          //  * We don't have a previousSibling\n          //  * The previousSibling is already the start of a previous part\n          if (node.previousSibling === null || index === lastPartIndex) {\n            index++;\n            parent.insertBefore(createMarker(), node);\n          }\n          lastPartIndex = index;\n          this.parts.push({type: 'node', index});\n          // If we don't have a nextSibling, keep this node so we have an end.\n          // Else, we can remove it to save future costs.\n          if (node.nextSibling === null) {\n            (node as Comment).data = '';\n          } else {\n            nodesToRemove.push(node);\n            index--;\n          }\n          partIndex++;\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            // TODO (justinfagnani): consider whether it's even worth it to\n            // make bindings in comments work\n            this.parts.push({type: 'node', index: -1});\n            partIndex++;\n          }\n        }\n      }\n    }\n\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\nconst endsWith = (str: string, suffix: string): boolean => {\n  const index = str.length - suffix.length;\n  return index >= 0 && str.slice(index) === suffix;\n};\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  readonly type: 'node'; index: number;\n}|{\n  readonly type: 'attribute';\n  index: number;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    // eslint-disable-next-line no-control-regex\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @packageDocumentation\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {defaultTemplateProcessor} from './lib/default-template-processor.js';\nimport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\n\nexport {DefaultTemplateProcessor, defaultTemplateProcessor} from './lib/default-template-processor.js';\nexport {directive, DirectiveFn, isDirective} from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport {removeNodes, reparentNodes} from './lib/dom.js';\nexport {noChange, nothing, Part} from './lib/part.js';\nexport {AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart} from './lib/parts.js';\nexport {RenderOptions} from './lib/render-options.js';\nexport {parts, render} from './lib/render.js';\nexport {templateCaches, templateFactory} from './lib/template-factory.js';\nexport {TemplateInstance} from './lib/template-instance.js';\nexport {TemplateProcessor} from './lib/template-processor.js';\nexport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\nexport {createMarker, isTemplatePartActive, Template} from './lib/template.js';\n\ndeclare global {\n  interface Window {\n    litHtmlVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\nif (typeof window !== 'undefined') {\n  (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.4.1');\n}\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n"],"names":["Subject","BehaviorSubject","_super","__extends","_value","_this","call","Object","defineProperty","prototype","get","getValue","_subscribe","subscriber","subscription","closed","next","_a","hasError","thrownError","_throwIfClosed","value","Observable","innerFrom","defer","observableFactory","subscribe","async","asyncScheduler","isScheduler","isValidDate","timer","dueTime","intervalOrScheduler","scheduler","intervalDuration","due","now","n","schedule","undefined","complete","identity","operate","createOperatorSubscriber","distinctUntilChanged","comparator","keySelector","defaultCompare","source","previousKey","first","currentKey","a","b","finalize","callback","add","map","mapTo","EMPTY","take","count","seen","noop","takeUntil","notifier","Date","isNaN","LitElement","RxLitElement","_LitElement","_inherits","_createSuper","_classCallCheck","$connected","_RxLitElement_firstUpdate","set","_assertThisInitialized","$","_createClass","key","connectedCallback","_get","_getPrototypeOf","disconnectedCallback","firstUpdated","__classPrivateFieldSet","updated","changedProperties","__classPrivateFieldGet","_iterator","_createForOfIteratorHelper","keys","_step","s","done","prop","err","e","f","fireEvent","name","eventInitDict","dispatchEvent","CustomEvent","concat","tagName","toLowerCase","applyMixins","derivedCtor","baseCtors","forEach","baseCtor","getOwnPropertyNames","supportsAdoptingStyleSheets","window","ShadowRoot","ShadyCSS","nativeShadow","Document","CSSStyleSheet","constructionToken","Symbol","CSSResult","cssText","safeToken","Error","_styleSheet","replaceSync","toString","unsafeCSS","String","textFromCSSResult","css","strings","_len","arguments","length","values","Array","_key","reduce","acc","v","idx","legacyCustomElement","clazz","customElements","define","standardCustomElement","descriptor","kind","elements","finisher","customElement","classOrDescriptor","standardProperty","options","element","assign","createProperty","placement","initializer","legacyProperty","proto","constructor","property","protoOrDescriptor","internalProperty","attribute","hasChanged","state","query","selector","cache","renderRoot","querySelector","enumerable","configurable","_typeof","legacyQuery","standardQuery","queryAsync","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","updateComplete","abrupt","stop","queryAll","querySelectorAll","standardEventOptions","legacyEventOptions","eventOptions","ElementProto","Element","legacyMatches","msMatchesSelector","webkitMatchesSelector","queryAssignedNodes","slotName","flatten","slotSelector","slot","nodes","assignedNodes","filter","node","nodeType","Node","ELEMENT_NODE","matches","JSCompiler_renameProperty","_obj","defaultConverter","toAttribute","type","Boolean","JSON","stringify","fromAttribute","Number","parse","notEqual","old","defaultPropertyDeclaration","converter","reflect","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING_TO_ATTRIBUTE","STATE_IS_REFLECTING_TO_PROPERTY","finalized","UpdatingElement","_HTMLElement","initialize","_this2","_updateState","_updatePromise","Promise","res","_enableUpdatingResolver","_changedProperties","Map","_saveInstanceProperties","requestUpdateInternal","_this3","_classProperties","_v","p","hasOwnProperty","_instanceProperties","_applyInstanceProperties","_this4","enableUpdating","attributeChangedCallback","_attributeToProperty","_propertyToAttribute","ctor","attr","_attributeNameForProperty","attrValue","_propertyValueToAttribute","removeAttribute","setAttribute","propName","_attributeToPropertyMap","getPropertyOptions","_propertyValueFromAttribute","oldValue","shouldRequestUpdate","_valueHasChanged","has","_reflectingProperties","_hasRequestedUpdate","_enqueueUpdate","requestUpdate","_enqueueUpdate2","result","t0","performUpdate","apply","shouldUpdate","update","_markUpdated","_getUpdateComplete","getUpdateComplete","_this5","size","k","_this6","attributes","push","_ensureClassProperties","_this7","superProperties","getPrototypeOf","noAccessor","getPropertyDescriptor","superCtor","props","properties","propKeys","_toConsumableArray","getOwnPropertySymbols","_wrapNativeSuper","HTMLElement","render","ReactiveElement","html","svg","TemplateResult","SVGTemplateResult","renderNotImplemented","_UpdatingElement","_getUniqueStyles","createRenderRoot","adoptStyles","attachShadow","shadowRootOptions","styles","_styles","ScopingShim","prepareAdoptedCssText","localName","adoptedStyleSheets","styleSheet","_needsShimAdoptedStyleSheets","hasUpdated","styleElement","templateResult","scopeName","eventContext","style","document","createElement","textContent","appendChild","getStyles","userStyles","isArray","addStyles","reduceRight","Set","unshift","slice","cssRules","rule","mode","AttributeCommitter","BooleanAttributePart","EventPart","NodePart","PropertyCommitter","DefaultTemplateProcessor","handleAttributeExpressions","prefix","committer","parts","handleTextExpression","defaultTemplateProcessor","directives","WeakMap","directive","d","isDirective","o","isCEPolyfill","polyfillWrapFlushCallback","reparentNodes","container","start","end","before","nextSibling","insertBefore","removeNodes","removeChild","isTemplatePartActive","walkerNodeFilter","removeNodesFromTemplate","template","nodesToRemove","content","walker","createTreeWalker","partIndex","nextActiveIndexInTemplateParts","part","nodeIndex","removeCount","nodesToRemoveInTemplate","currentRemovingNode","nextNode","currentNode","previousSibling","index","parentNode","countNodes","startIndex","i","insertNodeIntoTemplate","refNode","insertCount","walkerIndex","walkerNode","noChange","nothing","TemplateInstance","createMarker","isPrimitive","isIterable","iterator","dirty","_createPart","AttributePart","_getValue","l","text","t","commit","setValue","__pendingValue","appendInto","startNode","endNode","insertAfterNode","ref","appendIntoPart","__insert","insertAfterPart","__commitText","__commitTemplateResult","__commitNode","__commitIterable","clear","valueAsString","data","createTextNode","templateFactory","instance","processor","fragment","_clone","itemParts","itemPart","_iterator2","_step2","item","_AttributeCommitter","single","PropertyPart","_AttributePart","_super2","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","eventName","__boundHandleEvent","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","__options","getOptions","event","firstChild","litRender","templateCaches","marker","Template","getTemplateCacheKey","compatibleShadyCSSVersion","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","templateCache","stringsArray","keyString","join","getTemplateElement","TEMPLATE_TYPES","removeStylesFromLitTemplates","templates","from","shadyRenderSet","prepareTemplateStyles","renderedDOM","templateElement","condensedStyle","cloneNode","removes","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","delete","__parts","importNode","stack","nodeName","pop","_this$__parts","adoptNode","upgrade","boundAttributeSuffix","lastAttributeNameRegex","nodeMarker","policy","trustedTypes","createPolicy","createHTML","commentMarker","getHTML","isCommentBinding","commentOpen","lastIndexOf","indexOf","attributeMatch","exec","substr","innerHTML","_TemplateResult","svgElement","Math","random","markerRegex","RegExp","lastPartIndex","hasAttributes","endsWith","stringForPart","attributeLookupName","attributeValue","getAttribute","statics","split","parent","lastIndex","insert","match","_i3","_nodesToRemove","str","suffix","createComment","_len2","_key2"],"sourceRoot":""}